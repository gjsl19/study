/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
export const CheckEndpointNameAvailabilityInput = {
    type: {
        name: "Composite",
        className: "CheckEndpointNameAvailabilityInput",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            },
            autoGeneratedDomainNameLabelScope: {
                serializedName: "autoGeneratedDomainNameLabelScope",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CheckEndpointNameAvailabilityOutput = {
    type: {
        name: "Composite",
        className: "CheckEndpointNameAvailabilityOutput",
        modelProperties: {
            nameAvailable: {
                serializedName: "nameAvailable",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            availableHostname: {
                serializedName: "availableHostname",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            reason: {
                serializedName: "reason",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AfdErrorResponse = {
    type: {
        name: "Composite",
        className: "AfdErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
export const ErrorDetail = {
    type: {
        name: "Composite",
        className: "ErrorDetail",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorDetail"
                        }
                    }
                }
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo"
                        }
                    }
                }
            }
        }
    }
};
export const ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } }
                }
            }
        }
    }
};
export const UsagesListResult = {
    type: {
        name: "Composite",
        className: "UsagesListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Usage"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Usage = {
    type: {
        name: "Composite",
        className: "Usage",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                required: true,
                type: {
                    name: "String"
                }
            },
            currentValue: {
                serializedName: "currentValue",
                required: true,
                type: {
                    name: "Number"
                }
            },
            limit: {
                serializedName: "limit",
                required: true,
                type: {
                    name: "Number"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "Composite",
                    className: "UsageName"
                }
            }
        }
    }
};
export const UsageName = {
    type: {
        name: "Composite",
        className: "UsageName",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            },
            localizedValue: {
                serializedName: "localizedValue",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CheckHostNameAvailabilityInput = {
    type: {
        name: "Composite",
        className: "CheckHostNameAvailabilityInput",
        modelProperties: {
            hostName: {
                serializedName: "hostName",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CheckNameAvailabilityOutput = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityOutput",
        modelProperties: {
            nameAvailable: {
                serializedName: "nameAvailable",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AFDDomainListResult = {
    type: {
        name: "Composite",
        className: "AFDDomainListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AFDDomain"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const DomainValidationProperties = {
    type: {
        name: "Composite",
        className: "DomainValidationProperties",
        modelProperties: {
            validationToken: {
                serializedName: "validationToken",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            expirationDate: {
                serializedName: "expirationDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AFDDomainUpdatePropertiesParameters = {
    type: {
        name: "Composite",
        className: "AFDDomainUpdatePropertiesParameters",
        modelProperties: {
            profileName: {
                serializedName: "profileName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tlsSettings: {
                serializedName: "tlsSettings",
                type: {
                    name: "Composite",
                    className: "AFDDomainHttpsParameters"
                }
            },
            azureDnsZone: {
                serializedName: "azureDnsZone",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            },
            preValidatedCustomDomainResourceId: {
                serializedName: "preValidatedCustomDomainResourceId",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            }
        }
    }
};
export const AFDDomainHttpsParameters = {
    type: {
        name: "Composite",
        className: "AFDDomainHttpsParameters",
        modelProperties: {
            certificateType: {
                serializedName: "certificateType",
                required: true,
                type: {
                    name: "String"
                }
            },
            minimumTlsVersion: {
                serializedName: "minimumTlsVersion",
                type: {
                    name: "Enum",
                    allowedValues: ["TLS10", "TLS12"]
                }
            },
            secret: {
                serializedName: "secret",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            }
        }
    }
};
export const ResourceReference = {
    type: {
        name: "Composite",
        className: "ResourceReference",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AFDStateProperties = {
    type: {
        name: "Composite",
        className: "AFDStateProperties",
        modelProperties: {
            provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            deploymentStatus: {
                serializedName: "deploymentStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            systemData: {
                serializedName: "systemData",
                type: {
                    name: "Composite",
                    className: "SystemData"
                }
            }
        }
    }
};
export const SystemData = {
    type: {
        name: "Composite",
        className: "SystemData",
        modelProperties: {
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String"
                }
            },
            createdByType: {
                serializedName: "createdByType",
                type: {
                    name: "String"
                }
            },
            createdAt: {
                serializedName: "createdAt",
                type: {
                    name: "DateTime"
                }
            },
            lastModifiedBy: {
                serializedName: "lastModifiedBy",
                type: {
                    name: "String"
                }
            },
            lastModifiedByType: {
                serializedName: "lastModifiedByType",
                type: {
                    name: "String"
                }
            },
            lastModifiedAt: {
                serializedName: "lastModifiedAt",
                type: {
                    name: "DateTime"
                }
            }
        }
    }
};
export const AFDDomainUpdateParameters = {
    type: {
        name: "Composite",
        className: "AFDDomainUpdateParameters",
        modelProperties: {
            profileName: {
                serializedName: "properties.profileName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            tlsSettings: {
                serializedName: "properties.tlsSettings",
                type: {
                    name: "Composite",
                    className: "AFDDomainHttpsParameters"
                }
            },
            azureDnsZone: {
                serializedName: "properties.azureDnsZone",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            },
            preValidatedCustomDomainResourceId: {
                serializedName: "properties.preValidatedCustomDomainResourceId",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            }
        }
    }
};
export const AFDEndpointListResult = {
    type: {
        name: "Composite",
        className: "AFDEndpointListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AFDEndpoint"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AFDEndpointPropertiesUpdateParameters = {
    type: {
        name: "Composite",
        className: "AFDEndpointPropertiesUpdateParameters",
        modelProperties: {
            profileName: {
                serializedName: "profileName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            enabledState: {
                serializedName: "enabledState",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AFDEndpointUpdateParameters = {
    type: {
        name: "Composite",
        className: "AFDEndpointUpdateParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            profileName: {
                serializedName: "properties.profileName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            enabledState: {
                serializedName: "properties.enabledState",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AfdPurgeParameters = {
    type: {
        name: "Composite",
        className: "AfdPurgeParameters",
        modelProperties: {
            contentPaths: {
                serializedName: "contentPaths",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            domains: {
                serializedName: "domains",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const ValidateCustomDomainInput = {
    type: {
        name: "Composite",
        className: "ValidateCustomDomainInput",
        modelProperties: {
            hostName: {
                serializedName: "hostName",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ValidateCustomDomainOutput = {
    type: {
        name: "Composite",
        className: "ValidateCustomDomainOutput",
        modelProperties: {
            customDomainValidated: {
                serializedName: "customDomainValidated",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            reason: {
                serializedName: "reason",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AFDOriginGroupListResult = {
    type: {
        name: "Composite",
        className: "AFDOriginGroupListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AFDOriginGroup"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AFDOriginGroupUpdatePropertiesParameters = {
    type: {
        name: "Composite",
        className: "AFDOriginGroupUpdatePropertiesParameters",
        modelProperties: {
            profileName: {
                serializedName: "profileName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            loadBalancingSettings: {
                serializedName: "loadBalancingSettings",
                type: {
                    name: "Composite",
                    className: "LoadBalancingSettingsParameters"
                }
            },
            healthProbeSettings: {
                serializedName: "healthProbeSettings",
                type: {
                    name: "Composite",
                    className: "HealthProbeParameters"
                }
            },
            trafficRestorationTimeToHealedOrNewEndpointsInMinutes: {
                constraints: {
                    InclusiveMaximum: 50,
                    InclusiveMinimum: 0
                },
                serializedName: "trafficRestorationTimeToHealedOrNewEndpointsInMinutes",
                type: {
                    name: "Number"
                }
            },
            sessionAffinityState: {
                serializedName: "sessionAffinityState",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const LoadBalancingSettingsParameters = {
    type: {
        name: "Composite",
        className: "LoadBalancingSettingsParameters",
        modelProperties: {
            sampleSize: {
                serializedName: "sampleSize",
                type: {
                    name: "Number"
                }
            },
            successfulSamplesRequired: {
                serializedName: "successfulSamplesRequired",
                type: {
                    name: "Number"
                }
            },
            additionalLatencyInMilliseconds: {
                serializedName: "additionalLatencyInMilliseconds",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const HealthProbeParameters = {
    type: {
        name: "Composite",
        className: "HealthProbeParameters",
        modelProperties: {
            probePath: {
                serializedName: "probePath",
                type: {
                    name: "String"
                }
            },
            probeRequestType: {
                serializedName: "probeRequestType",
                type: {
                    name: "Enum",
                    allowedValues: ["NotSet", "GET", "HEAD"]
                }
            },
            probeProtocol: {
                serializedName: "probeProtocol",
                type: {
                    name: "Enum",
                    allowedValues: ["NotSet", "Http", "Https"]
                }
            },
            probeIntervalInSeconds: {
                constraints: {
                    InclusiveMaximum: 255,
                    InclusiveMinimum: 1
                },
                serializedName: "probeIntervalInSeconds",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const AFDOriginGroupUpdateParameters = {
    type: {
        name: "Composite",
        className: "AFDOriginGroupUpdateParameters",
        modelProperties: {
            profileName: {
                serializedName: "properties.profileName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            loadBalancingSettings: {
                serializedName: "properties.loadBalancingSettings",
                type: {
                    name: "Composite",
                    className: "LoadBalancingSettingsParameters"
                }
            },
            healthProbeSettings: {
                serializedName: "properties.healthProbeSettings",
                type: {
                    name: "Composite",
                    className: "HealthProbeParameters"
                }
            },
            trafficRestorationTimeToHealedOrNewEndpointsInMinutes: {
                constraints: {
                    InclusiveMaximum: 50,
                    InclusiveMinimum: 0
                },
                serializedName: "properties.trafficRestorationTimeToHealedOrNewEndpointsInMinutes",
                type: {
                    name: "Number"
                }
            },
            sessionAffinityState: {
                serializedName: "properties.sessionAffinityState",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AFDOriginListResult = {
    type: {
        name: "Composite",
        className: "AFDOriginListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "AFDOrigin"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AFDOriginUpdatePropertiesParameters = {
    type: {
        name: "Composite",
        className: "AFDOriginUpdatePropertiesParameters",
        modelProperties: {
            originGroupName: {
                serializedName: "originGroupName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            azureOrigin: {
                serializedName: "azureOrigin",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            },
            hostName: {
                serializedName: "hostName",
                type: {
                    name: "String"
                }
            },
            httpPort: {
                constraints: {
                    InclusiveMaximum: 65535,
                    InclusiveMinimum: 1
                },
                serializedName: "httpPort",
                type: {
                    name: "Number"
                }
            },
            httpsPort: {
                constraints: {
                    InclusiveMaximum: 65535,
                    InclusiveMinimum: 1
                },
                serializedName: "httpsPort",
                type: {
                    name: "Number"
                }
            },
            originHostHeader: {
                serializedName: "originHostHeader",
                type: {
                    name: "String"
                }
            },
            priority: {
                constraints: {
                    InclusiveMaximum: 5,
                    InclusiveMinimum: 1
                },
                serializedName: "priority",
                type: {
                    name: "Number"
                }
            },
            weight: {
                constraints: {
                    InclusiveMaximum: 1000,
                    InclusiveMinimum: 1
                },
                serializedName: "weight",
                type: {
                    name: "Number"
                }
            },
            sharedPrivateLinkResource: {
                serializedName: "sharedPrivateLinkResource",
                type: {
                    name: "Composite",
                    className: "SharedPrivateLinkResourceProperties"
                }
            },
            enabledState: {
                serializedName: "enabledState",
                type: {
                    name: "String"
                }
            },
            enforceCertificateNameCheck: {
                defaultValue: true,
                serializedName: "enforceCertificateNameCheck",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const SharedPrivateLinkResourceProperties = {
    type: {
        name: "Composite",
        className: "SharedPrivateLinkResourceProperties",
        modelProperties: {
            privateLink: {
                serializedName: "privateLink",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            },
            privateLinkLocation: {
                serializedName: "privateLinkLocation",
                type: {
                    name: "String"
                }
            },
            groupId: {
                serializedName: "groupId",
                type: {
                    name: "String"
                }
            },
            requestMessage: {
                serializedName: "requestMessage",
                type: {
                    name: "String"
                }
            },
            status: {
                serializedName: "status",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Pending",
                        "Approved",
                        "Rejected",
                        "Disconnected",
                        "Timeout"
                    ]
                }
            }
        }
    }
};
export const AFDOriginUpdateParameters = {
    type: {
        name: "Composite",
        className: "AFDOriginUpdateParameters",
        modelProperties: {
            originGroupName: {
                serializedName: "properties.originGroupName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            azureOrigin: {
                serializedName: "properties.azureOrigin",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            },
            hostName: {
                serializedName: "properties.hostName",
                type: {
                    name: "String"
                }
            },
            httpPort: {
                constraints: {
                    InclusiveMaximum: 65535,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.httpPort",
                type: {
                    name: "Number"
                }
            },
            httpsPort: {
                constraints: {
                    InclusiveMaximum: 65535,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.httpsPort",
                type: {
                    name: "Number"
                }
            },
            originHostHeader: {
                serializedName: "properties.originHostHeader",
                type: {
                    name: "String"
                }
            },
            priority: {
                constraints: {
                    InclusiveMaximum: 5,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.priority",
                type: {
                    name: "Number"
                }
            },
            weight: {
                constraints: {
                    InclusiveMaximum: 1000,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.weight",
                type: {
                    name: "Number"
                }
            },
            sharedPrivateLinkResource: {
                serializedName: "properties.sharedPrivateLinkResource",
                type: {
                    name: "Composite",
                    className: "SharedPrivateLinkResourceProperties"
                }
            },
            enabledState: {
                serializedName: "properties.enabledState",
                type: {
                    name: "String"
                }
            },
            enforceCertificateNameCheck: {
                defaultValue: true,
                serializedName: "properties.enforceCertificateNameCheck",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const RouteListResult = {
    type: {
        name: "Composite",
        className: "RouteListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Route"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const RouteUpdatePropertiesParameters = {
    type: {
        name: "Composite",
        className: "RouteUpdatePropertiesParameters",
        modelProperties: {
            endpointName: {
                serializedName: "endpointName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            customDomains: {
                serializedName: "customDomains",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ActivatedResourceReference"
                        }
                    }
                }
            },
            originGroup: {
                serializedName: "originGroup",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            },
            originPath: {
                serializedName: "originPath",
                type: {
                    name: "String"
                }
            },
            ruleSets: {
                serializedName: "ruleSets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceReference"
                        }
                    }
                }
            },
            supportedProtocols: {
                serializedName: "supportedProtocols",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            patternsToMatch: {
                serializedName: "patternsToMatch",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            cacheConfiguration: {
                serializedName: "cacheConfiguration",
                type: {
                    name: "Composite",
                    className: "AfdRouteCacheConfiguration"
                }
            },
            forwardingProtocol: {
                serializedName: "forwardingProtocol",
                type: {
                    name: "String"
                }
            },
            linkToDefaultDomain: {
                serializedName: "linkToDefaultDomain",
                type: {
                    name: "String"
                }
            },
            httpsRedirect: {
                serializedName: "httpsRedirect",
                type: {
                    name: "String"
                }
            },
            enabledState: {
                serializedName: "enabledState",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ActivatedResourceReference = {
    type: {
        name: "Composite",
        className: "ActivatedResourceReference",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            isActive: {
                serializedName: "isActive",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const AfdRouteCacheConfiguration = {
    type: {
        name: "Composite",
        className: "AfdRouteCacheConfiguration",
        modelProperties: {
            queryStringCachingBehavior: {
                serializedName: "queryStringCachingBehavior",
                type: {
                    name: "String"
                }
            },
            queryParameters: {
                serializedName: "queryParameters",
                type: {
                    name: "String"
                }
            },
            compressionSettings: {
                serializedName: "compressionSettings",
                type: {
                    name: "Composite",
                    className: "CompressionSettings"
                }
            }
        }
    }
};
export const CompressionSettings = {
    type: {
        name: "Composite",
        className: "CompressionSettings",
        modelProperties: {
            contentTypesToCompress: {
                serializedName: "contentTypesToCompress",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            isCompressionEnabled: {
                serializedName: "isCompressionEnabled",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const RouteUpdateParameters = {
    type: {
        name: "Composite",
        className: "RouteUpdateParameters",
        modelProperties: {
            endpointName: {
                serializedName: "properties.endpointName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            customDomains: {
                serializedName: "properties.customDomains",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ActivatedResourceReference"
                        }
                    }
                }
            },
            originGroup: {
                serializedName: "properties.originGroup",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            },
            originPath: {
                serializedName: "properties.originPath",
                type: {
                    name: "String"
                }
            },
            ruleSets: {
                serializedName: "properties.ruleSets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceReference"
                        }
                    }
                }
            },
            supportedProtocols: {
                serializedName: "properties.supportedProtocols",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            patternsToMatch: {
                serializedName: "properties.patternsToMatch",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            cacheConfiguration: {
                serializedName: "properties.cacheConfiguration",
                type: {
                    name: "Composite",
                    className: "AfdRouteCacheConfiguration"
                }
            },
            forwardingProtocol: {
                serializedName: "properties.forwardingProtocol",
                type: {
                    name: "String"
                }
            },
            linkToDefaultDomain: {
                serializedName: "properties.linkToDefaultDomain",
                type: {
                    name: "String"
                }
            },
            httpsRedirect: {
                serializedName: "properties.httpsRedirect",
                type: {
                    name: "String"
                }
            },
            enabledState: {
                serializedName: "properties.enabledState",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const RuleSetListResult = {
    type: {
        name: "Composite",
        className: "RuleSetListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RuleSet"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const RuleListResult = {
    type: {
        name: "Composite",
        className: "RuleListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Rule"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const RuleUpdatePropertiesParameters = {
    type: {
        name: "Composite",
        className: "RuleUpdatePropertiesParameters",
        modelProperties: {
            ruleSetName: {
                serializedName: "ruleSetName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            order: {
                serializedName: "order",
                type: {
                    name: "Number"
                }
            },
            conditions: {
                serializedName: "conditions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DeliveryRuleCondition"
                        }
                    }
                }
            },
            actions: {
                serializedName: "actions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DeliveryRuleActionAutoGenerated"
                        }
                    }
                }
            },
            matchProcessingBehavior: {
                serializedName: "matchProcessingBehavior",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const DeliveryRuleCondition = {
    type: {
        name: "Composite",
        className: "DeliveryRuleCondition",
        uberParent: "DeliveryRuleCondition",
        polymorphicDiscriminator: {
            serializedName: "name",
            clientName: "name"
        },
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const DeliveryRuleActionAutoGenerated = {
    type: {
        name: "Composite",
        className: "DeliveryRuleActionAutoGenerated",
        uberParent: "DeliveryRuleActionAutoGenerated",
        polymorphicDiscriminator: {
            serializedName: "name",
            clientName: "name"
        },
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const RuleUpdateParameters = {
    type: {
        name: "Composite",
        className: "RuleUpdateParameters",
        modelProperties: {
            ruleSetName: {
                serializedName: "properties.ruleSetName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            order: {
                serializedName: "properties.order",
                type: {
                    name: "Number"
                }
            },
            conditions: {
                serializedName: "properties.conditions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DeliveryRuleCondition"
                        }
                    }
                }
            },
            actions: {
                serializedName: "properties.actions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DeliveryRuleActionAutoGenerated"
                        }
                    }
                }
            },
            matchProcessingBehavior: {
                serializedName: "properties.matchProcessingBehavior",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SecurityPolicyListResult = {
    type: {
        name: "Composite",
        className: "SecurityPolicyListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SecurityPolicy"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SecurityPolicyPropertiesParameters = {
    type: {
        name: "Composite",
        className: "SecurityPolicyPropertiesParameters",
        uberParent: "SecurityPolicyPropertiesParameters",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SecurityPolicyUpdateParameters = {
    type: {
        name: "Composite",
        className: "SecurityPolicyUpdateParameters",
        modelProperties: {
            parameters: {
                serializedName: "properties.parameters",
                type: {
                    name: "Composite",
                    className: "SecurityPolicyPropertiesParameters"
                }
            }
        }
    }
};
export const SecretListResult = {
    type: {
        name: "Composite",
        className: "SecretListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Secret"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SecretParameters = {
    type: {
        name: "Composite",
        className: "SecretParameters",
        uberParent: "SecretParameters",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type"
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ValidateSecretInput = {
    type: {
        name: "Composite",
        className: "ValidateSecretInput",
        modelProperties: {
            secretType: {
                serializedName: "secretType",
                required: true,
                type: {
                    name: "String"
                }
            },
            secretSource: {
                serializedName: "secretSource",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            },
            secretVersion: {
                serializedName: "secretVersion",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ValidateSecretOutput = {
    type: {
        name: "Composite",
        className: "ValidateSecretOutput",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const MetricsResponse = {
    type: {
        name: "Composite",
        className: "MetricsResponse",
        modelProperties: {
            dateTimeBegin: {
                serializedName: "dateTimeBegin",
                type: {
                    name: "DateTime"
                }
            },
            dateTimeEnd: {
                serializedName: "dateTimeEnd",
                type: {
                    name: "DateTime"
                }
            },
            granularity: {
                serializedName: "granularity",
                type: {
                    name: "String"
                }
            },
            series: {
                serializedName: "series",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetricsResponseSeriesItem"
                        }
                    }
                }
            }
        }
    }
};
export const MetricsResponseSeriesItem = {
    type: {
        name: "Composite",
        className: "MetricsResponseSeriesItem",
        modelProperties: {
            metric: {
                serializedName: "metric",
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            groups: {
                serializedName: "groups",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetricsResponseSeriesPropertiesItemsItem"
                        }
                    }
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Components1Gs0LlpSchemasMetricsresponsePropertiesSeriesItemsPropertiesDataItems"
                        }
                    }
                }
            }
        }
    }
};
export const MetricsResponseSeriesPropertiesItemsItem = {
    type: {
        name: "Composite",
        className: "MetricsResponseSeriesPropertiesItemsItem",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Components1Gs0LlpSchemasMetricsresponsePropertiesSeriesItemsPropertiesDataItems = {
    type: {
        name: "Composite",
        className: "Components1Gs0LlpSchemasMetricsresponsePropertiesSeriesItemsPropertiesDataItems",
        modelProperties: {
            dateTime: {
                serializedName: "dateTime",
                type: {
                    name: "DateTime"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const RankingsResponse = {
    type: {
        name: "Composite",
        className: "RankingsResponse",
        modelProperties: {
            dateTimeBegin: {
                serializedName: "dateTimeBegin",
                type: {
                    name: "DateTime"
                }
            },
            dateTimeEnd: {
                serializedName: "dateTimeEnd",
                type: {
                    name: "DateTime"
                }
            },
            tables: {
                serializedName: "tables",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RankingsResponseTablesItem"
                        }
                    }
                }
            }
        }
    }
};
export const RankingsResponseTablesItem = {
    type: {
        name: "Composite",
        className: "RankingsResponseTablesItem",
        modelProperties: {
            ranking: {
                serializedName: "ranking",
                type: {
                    name: "String"
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RankingsResponseTablesPropertiesItemsItem"
                        }
                    }
                }
            }
        }
    }
};
export const RankingsResponseTablesPropertiesItemsItem = {
    type: {
        name: "Composite",
        className: "RankingsResponseTablesPropertiesItemsItem",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            metrics: {
                serializedName: "metrics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RankingsResponseTablesPropertiesItemsMetricsItem"
                        }
                    }
                }
            }
        }
    }
};
export const RankingsResponseTablesPropertiesItemsMetricsItem = {
    type: {
        name: "Composite",
        className: "RankingsResponseTablesPropertiesItemsMetricsItem",
        modelProperties: {
            metric: {
                serializedName: "metric",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Number"
                }
            },
            percentage: {
                serializedName: "percentage",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const ContinentsResponse = {
    type: {
        name: "Composite",
        className: "ContinentsResponse",
        modelProperties: {
            continents: {
                serializedName: "continents",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContinentsResponseContinentsItem"
                        }
                    }
                }
            },
            countryOrRegions: {
                serializedName: "countryOrRegions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ContinentsResponseCountryOrRegionsItem"
                        }
                    }
                }
            }
        }
    }
};
export const ContinentsResponseContinentsItem = {
    type: {
        name: "Composite",
        className: "ContinentsResponseContinentsItem",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ContinentsResponseCountryOrRegionsItem = {
    type: {
        name: "Composite",
        className: "ContinentsResponseCountryOrRegionsItem",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            continentId: {
                serializedName: "continentId",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ResourcesResponse = {
    type: {
        name: "Composite",
        className: "ResourcesResponse",
        modelProperties: {
            endpoints: {
                serializedName: "endpoints",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourcesResponseEndpointsItem"
                        }
                    }
                }
            },
            customDomains: {
                serializedName: "customDomains",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourcesResponseCustomDomainsItem"
                        }
                    }
                }
            }
        }
    }
};
export const ResourcesResponseEndpointsItem = {
    type: {
        name: "Composite",
        className: "ResourcesResponseEndpointsItem",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            history: {
                serializedName: "history",
                type: {
                    name: "Boolean"
                }
            },
            customDomains: {
                serializedName: "customDomains",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourcesResponseEndpointsPropertiesItemsItem"
                        }
                    }
                }
            }
        }
    }
};
export const ResourcesResponseEndpointsPropertiesItemsItem = {
    type: {
        name: "Composite",
        className: "ResourcesResponseEndpointsPropertiesItemsItem",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            endpointId: {
                serializedName: "endpointId",
                type: {
                    name: "String"
                }
            },
            history: {
                serializedName: "history",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const ResourcesResponseCustomDomainsItem = {
    type: {
        name: "Composite",
        className: "ResourcesResponseCustomDomainsItem",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            endpointId: {
                serializedName: "endpointId",
                type: {
                    name: "String"
                }
            },
            history: {
                serializedName: "history",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const WafMetricsResponse = {
    type: {
        name: "Composite",
        className: "WafMetricsResponse",
        modelProperties: {
            dateTimeBegin: {
                serializedName: "dateTimeBegin",
                type: {
                    name: "DateTime"
                }
            },
            dateTimeEnd: {
                serializedName: "dateTimeEnd",
                type: {
                    name: "DateTime"
                }
            },
            granularity: {
                serializedName: "granularity",
                type: {
                    name: "String"
                }
            },
            series: {
                serializedName: "series",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "WafMetricsResponseSeriesItem"
                        }
                    }
                }
            }
        }
    }
};
export const WafMetricsResponseSeriesItem = {
    type: {
        name: "Composite",
        className: "WafMetricsResponseSeriesItem",
        modelProperties: {
            metric: {
                serializedName: "metric",
                type: {
                    name: "String"
                }
            },
            unit: {
                defaultValue: "count",
                isConstant: true,
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            groups: {
                serializedName: "groups",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "WafMetricsResponseSeriesPropertiesItemsItem"
                        }
                    }
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Components18OrqelSchemasWafmetricsresponsePropertiesSeriesItemsPropertiesDataItems"
                        }
                    }
                }
            }
        }
    }
};
export const WafMetricsResponseSeriesPropertiesItemsItem = {
    type: {
        name: "Composite",
        className: "WafMetricsResponseSeriesPropertiesItemsItem",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Components18OrqelSchemasWafmetricsresponsePropertiesSeriesItemsPropertiesDataItems = {
    type: {
        name: "Composite",
        className: "Components18OrqelSchemasWafmetricsresponsePropertiesSeriesItemsPropertiesDataItems",
        modelProperties: {
            dateTime: {
                serializedName: "dateTime",
                type: {
                    name: "DateTime"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const WafRankingsResponse = {
    type: {
        name: "Composite",
        className: "WafRankingsResponse",
        modelProperties: {
            dateTimeBegin: {
                serializedName: "dateTimeBegin",
                type: {
                    name: "DateTime"
                }
            },
            dateTimeEnd: {
                serializedName: "dateTimeEnd",
                type: {
                    name: "DateTime"
                }
            },
            groups: {
                serializedName: "groups",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            data: {
                serializedName: "data",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "WafRankingsResponseDataItem"
                        }
                    }
                }
            }
        }
    }
};
export const WafRankingsResponseDataItem = {
    type: {
        name: "Composite",
        className: "WafRankingsResponseDataItem",
        modelProperties: {
            groupValues: {
                serializedName: "groupValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            metrics: {
                serializedName: "metrics",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ComponentsKpo1PjSchemasWafrankingsresponsePropertiesDataItemsPropertiesMetricsItems"
                        }
                    }
                }
            }
        }
    }
};
export const ComponentsKpo1PjSchemasWafrankingsresponsePropertiesDataItemsPropertiesMetricsItems = {
    type: {
        name: "Composite",
        className: "ComponentsKpo1PjSchemasWafrankingsresponsePropertiesDataItemsPropertiesMetricsItems",
        modelProperties: {
            metric: {
                serializedName: "metric",
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Number"
                }
            },
            percentage: {
                serializedName: "percentage",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const ProfileListResult = {
    type: {
        name: "Composite",
        className: "ProfileListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Profile"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Sku = {
    type: {
        name: "Composite",
        className: "Sku",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorDetail"
                }
            }
        }
    }
};
export const ProfileUpdateParameters = {
    type: {
        name: "Composite",
        className: "ProfileUpdateParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            originResponseTimeoutSeconds: {
                constraints: {
                    InclusiveMinimum: 16
                },
                serializedName: "properties.originResponseTimeoutSeconds",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const SsoUri = {
    type: {
        name: "Composite",
        className: "SsoUri",
        modelProperties: {
            ssoUriValue: {
                serializedName: "ssoUriValue",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SupportedOptimizationTypesListResult = {
    type: {
        name: "Composite",
        className: "SupportedOptimizationTypesListResult",
        modelProperties: {
            supportedOptimizationTypes: {
                serializedName: "supportedOptimizationTypes",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const ResourceUsageListResult = {
    type: {
        name: "Composite",
        className: "ResourceUsageListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceUsage"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ResourceUsage = {
    type: {
        name: "Composite",
        className: "ResourceUsage",
        modelProperties: {
            resourceType: {
                serializedName: "resourceType",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            currentValue: {
                serializedName: "currentValue",
                readOnly: true,
                type: {
                    name: "Number"
                }
            },
            limit: {
                serializedName: "limit",
                readOnly: true,
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const EndpointListResult = {
    type: {
        name: "Composite",
        className: "EndpointListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Endpoint"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const DeepCreatedOrigin = {
    type: {
        name: "Composite",
        className: "DeepCreatedOrigin",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            hostName: {
                serializedName: "properties.hostName",
                type: {
                    name: "String"
                }
            },
            httpPort: {
                constraints: {
                    InclusiveMaximum: 65535,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.httpPort",
                type: {
                    name: "Number"
                }
            },
            httpsPort: {
                constraints: {
                    InclusiveMaximum: 65535,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.httpsPort",
                type: {
                    name: "Number"
                }
            },
            originHostHeader: {
                serializedName: "properties.originHostHeader",
                type: {
                    name: "String"
                }
            },
            priority: {
                constraints: {
                    InclusiveMaximum: 5,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.priority",
                type: {
                    name: "Number"
                }
            },
            weight: {
                constraints: {
                    InclusiveMaximum: 1000,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.weight",
                type: {
                    name: "Number"
                }
            },
            enabled: {
                serializedName: "properties.enabled",
                type: {
                    name: "Boolean"
                }
            },
            privateLinkAlias: {
                serializedName: "properties.privateLinkAlias",
                type: {
                    name: "String"
                }
            },
            privateLinkResourceId: {
                serializedName: "properties.privateLinkResourceId",
                type: {
                    name: "String"
                }
            },
            privateLinkLocation: {
                serializedName: "properties.privateLinkLocation",
                type: {
                    name: "String"
                }
            },
            privateLinkApprovalMessage: {
                serializedName: "properties.privateLinkApprovalMessage",
                type: {
                    name: "String"
                }
            },
            privateEndpointStatus: {
                serializedName: "properties.privateEndpointStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const DeepCreatedOriginGroup = {
    type: {
        name: "Composite",
        className: "DeepCreatedOriginGroup",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            healthProbeSettings: {
                serializedName: "properties.healthProbeSettings",
                type: {
                    name: "Composite",
                    className: "HealthProbeParameters"
                }
            },
            origins: {
                serializedName: "properties.origins",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceReference"
                        }
                    }
                }
            },
            trafficRestorationTimeToHealedOrNewEndpointsInMinutes: {
                constraints: {
                    InclusiveMaximum: 50,
                    InclusiveMinimum: 0
                },
                serializedName: "properties.trafficRestorationTimeToHealedOrNewEndpointsInMinutes",
                type: {
                    name: "Number"
                }
            },
            responseBasedOriginErrorDetectionSettings: {
                serializedName: "properties.responseBasedOriginErrorDetectionSettings",
                type: {
                    name: "Composite",
                    className: "ResponseBasedOriginErrorDetectionParameters"
                }
            }
        }
    }
};
export const ResponseBasedOriginErrorDetectionParameters = {
    type: {
        name: "Composite",
        className: "ResponseBasedOriginErrorDetectionParameters",
        modelProperties: {
            responseBasedDetectedErrorTypes: {
                serializedName: "responseBasedDetectedErrorTypes",
                type: {
                    name: "Enum",
                    allowedValues: ["None", "TcpErrorsOnly", "TcpAndHttpErrors"]
                }
            },
            responseBasedFailoverThresholdPercentage: {
                constraints: {
                    InclusiveMaximum: 100,
                    InclusiveMinimum: 0
                },
                serializedName: "responseBasedFailoverThresholdPercentage",
                type: {
                    name: "Number"
                }
            },
            httpErrorRanges: {
                serializedName: "httpErrorRanges",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "HttpErrorRangeParameters"
                        }
                    }
                }
            }
        }
    }
};
export const HttpErrorRangeParameters = {
    type: {
        name: "Composite",
        className: "HttpErrorRangeParameters",
        modelProperties: {
            begin: {
                constraints: {
                    InclusiveMaximum: 999,
                    InclusiveMinimum: 100
                },
                serializedName: "begin",
                type: {
                    name: "Number"
                }
            },
            end: {
                constraints: {
                    InclusiveMaximum: 999,
                    InclusiveMinimum: 100
                },
                serializedName: "end",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const DeepCreatedCustomDomain = {
    type: {
        name: "Composite",
        className: "DeepCreatedCustomDomain",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            hostName: {
                serializedName: "properties.hostName",
                type: {
                    name: "String"
                }
            },
            validationData: {
                serializedName: "properties.validationData",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const EndpointPropertiesUpdateParameters = {
    type: {
        name: "Composite",
        className: "EndpointPropertiesUpdateParameters",
        modelProperties: {
            originPath: {
                serializedName: "originPath",
                type: {
                    name: "String"
                }
            },
            contentTypesToCompress: {
                serializedName: "contentTypesToCompress",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            originHostHeader: {
                serializedName: "originHostHeader",
                type: {
                    name: "String"
                }
            },
            isCompressionEnabled: {
                serializedName: "isCompressionEnabled",
                type: {
                    name: "Boolean"
                }
            },
            isHttpAllowed: {
                serializedName: "isHttpAllowed",
                type: {
                    name: "Boolean"
                }
            },
            isHttpsAllowed: {
                serializedName: "isHttpsAllowed",
                type: {
                    name: "Boolean"
                }
            },
            queryStringCachingBehavior: {
                serializedName: "queryStringCachingBehavior",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "IgnoreQueryString",
                        "BypassCaching",
                        "UseQueryString",
                        "NotSet"
                    ]
                }
            },
            optimizationType: {
                serializedName: "optimizationType",
                type: {
                    name: "String"
                }
            },
            probePath: {
                serializedName: "probePath",
                type: {
                    name: "String"
                }
            },
            geoFilters: {
                serializedName: "geoFilters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GeoFilter"
                        }
                    }
                }
            },
            defaultOriginGroup: {
                serializedName: "defaultOriginGroup",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            },
            urlSigningKeys: {
                serializedName: "urlSigningKeys",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UrlSigningKey"
                        }
                    }
                }
            },
            deliveryPolicy: {
                serializedName: "deliveryPolicy",
                type: {
                    name: "Composite",
                    className: "EndpointPropertiesUpdateParametersDeliveryPolicy"
                }
            },
            webApplicationFirewallPolicyLink: {
                serializedName: "webApplicationFirewallPolicyLink",
                type: {
                    name: "Composite",
                    className: "EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink"
                }
            }
        }
    }
};
export const GeoFilter = {
    type: {
        name: "Composite",
        className: "GeoFilter",
        modelProperties: {
            relativePath: {
                serializedName: "relativePath",
                required: true,
                type: {
                    name: "String"
                }
            },
            action: {
                serializedName: "action",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["Block", "Allow"]
                }
            },
            countryCodes: {
                serializedName: "countryCodes",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const UrlSigningKey = {
    type: {
        name: "Composite",
        className: "UrlSigningKey",
        modelProperties: {
            keyId: {
                serializedName: "keyId",
                required: true,
                type: {
                    name: "String"
                }
            },
            keySourceParameters: {
                serializedName: "keySourceParameters",
                type: {
                    name: "Composite",
                    className: "KeyVaultSigningKeyParameters"
                }
            }
        }
    }
};
export const KeyVaultSigningKeyParameters = {
    type: {
        name: "Composite",
        className: "KeyVaultSigningKeyParameters",
        modelProperties: {
            typeName: {
                defaultValue: "KeyVaultSigningKeyParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceGroupName: {
                serializedName: "resourceGroupName",
                required: true,
                type: {
                    name: "String"
                }
            },
            vaultName: {
                serializedName: "vaultName",
                required: true,
                type: {
                    name: "String"
                }
            },
            secretName: {
                serializedName: "secretName",
                required: true,
                type: {
                    name: "String"
                }
            },
            secretVersion: {
                serializedName: "secretVersion",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const EndpointPropertiesUpdateParametersDeliveryPolicy = {
    type: {
        name: "Composite",
        className: "EndpointPropertiesUpdateParametersDeliveryPolicy",
        modelProperties: {
            description: {
                serializedName: "description",
                type: {
                    name: "String"
                }
            },
            rules: {
                serializedName: "rules",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DeliveryRule"
                        }
                    }
                }
            }
        }
    }
};
export const DeliveryRule = {
    type: {
        name: "Composite",
        className: "DeliveryRule",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            order: {
                serializedName: "order",
                required: true,
                type: {
                    name: "Number"
                }
            },
            conditions: {
                serializedName: "conditions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DeliveryRuleCondition"
                        }
                    }
                }
            },
            actions: {
                serializedName: "actions",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DeliveryRuleActionAutoGenerated"
                        }
                    }
                }
            }
        }
    }
};
export const EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink = {
    type: {
        name: "Composite",
        className: "EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const EndpointUpdateParameters = {
    type: {
        name: "Composite",
        className: "EndpointUpdateParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            },
            originPath: {
                serializedName: "properties.originPath",
                type: {
                    name: "String"
                }
            },
            contentTypesToCompress: {
                serializedName: "properties.contentTypesToCompress",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            originHostHeader: {
                serializedName: "properties.originHostHeader",
                type: {
                    name: "String"
                }
            },
            isCompressionEnabled: {
                serializedName: "properties.isCompressionEnabled",
                type: {
                    name: "Boolean"
                }
            },
            isHttpAllowed: {
                serializedName: "properties.isHttpAllowed",
                type: {
                    name: "Boolean"
                }
            },
            isHttpsAllowed: {
                serializedName: "properties.isHttpsAllowed",
                type: {
                    name: "Boolean"
                }
            },
            queryStringCachingBehavior: {
                serializedName: "properties.queryStringCachingBehavior",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "IgnoreQueryString",
                        "BypassCaching",
                        "UseQueryString",
                        "NotSet"
                    ]
                }
            },
            optimizationType: {
                serializedName: "properties.optimizationType",
                type: {
                    name: "String"
                }
            },
            probePath: {
                serializedName: "properties.probePath",
                type: {
                    name: "String"
                }
            },
            geoFilters: {
                serializedName: "properties.geoFilters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GeoFilter"
                        }
                    }
                }
            },
            defaultOriginGroup: {
                serializedName: "properties.defaultOriginGroup",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            },
            urlSigningKeys: {
                serializedName: "properties.urlSigningKeys",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UrlSigningKey"
                        }
                    }
                }
            },
            deliveryPolicy: {
                serializedName: "properties.deliveryPolicy",
                type: {
                    name: "Composite",
                    className: "EndpointPropertiesUpdateParametersDeliveryPolicy"
                }
            },
            webApplicationFirewallPolicyLink: {
                serializedName: "properties.webApplicationFirewallPolicyLink",
                type: {
                    name: "Composite",
                    className: "EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink"
                }
            }
        }
    }
};
export const PurgeParameters = {
    type: {
        name: "Composite",
        className: "PurgeParameters",
        modelProperties: {
            contentPaths: {
                serializedName: "contentPaths",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const LoadParameters = {
    type: {
        name: "Composite",
        className: "LoadParameters",
        modelProperties: {
            contentPaths: {
                serializedName: "contentPaths",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const OriginListResult = {
    type: {
        name: "Composite",
        className: "OriginListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Origin"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const OriginUpdatePropertiesParameters = {
    type: {
        name: "Composite",
        className: "OriginUpdatePropertiesParameters",
        modelProperties: {
            hostName: {
                serializedName: "hostName",
                type: {
                    name: "String"
                }
            },
            httpPort: {
                constraints: {
                    InclusiveMaximum: 65535,
                    InclusiveMinimum: 1
                },
                serializedName: "httpPort",
                type: {
                    name: "Number"
                }
            },
            httpsPort: {
                constraints: {
                    InclusiveMaximum: 65535,
                    InclusiveMinimum: 1
                },
                serializedName: "httpsPort",
                type: {
                    name: "Number"
                }
            },
            originHostHeader: {
                serializedName: "originHostHeader",
                type: {
                    name: "String"
                }
            },
            priority: {
                constraints: {
                    InclusiveMaximum: 5,
                    InclusiveMinimum: 1
                },
                serializedName: "priority",
                type: {
                    name: "Number"
                }
            },
            weight: {
                constraints: {
                    InclusiveMaximum: 1000,
                    InclusiveMinimum: 1
                },
                serializedName: "weight",
                type: {
                    name: "Number"
                }
            },
            enabled: {
                serializedName: "enabled",
                type: {
                    name: "Boolean"
                }
            },
            privateLinkAlias: {
                serializedName: "privateLinkAlias",
                type: {
                    name: "String"
                }
            },
            privateLinkResourceId: {
                serializedName: "privateLinkResourceId",
                type: {
                    name: "String"
                }
            },
            privateLinkLocation: {
                serializedName: "privateLinkLocation",
                type: {
                    name: "String"
                }
            },
            privateLinkApprovalMessage: {
                serializedName: "privateLinkApprovalMessage",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const OriginUpdateParameters = {
    type: {
        name: "Composite",
        className: "OriginUpdateParameters",
        modelProperties: {
            hostName: {
                serializedName: "properties.hostName",
                type: {
                    name: "String"
                }
            },
            httpPort: {
                constraints: {
                    InclusiveMaximum: 65535,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.httpPort",
                type: {
                    name: "Number"
                }
            },
            httpsPort: {
                constraints: {
                    InclusiveMaximum: 65535,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.httpsPort",
                type: {
                    name: "Number"
                }
            },
            originHostHeader: {
                serializedName: "properties.originHostHeader",
                type: {
                    name: "String"
                }
            },
            priority: {
                constraints: {
                    InclusiveMaximum: 5,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.priority",
                type: {
                    name: "Number"
                }
            },
            weight: {
                constraints: {
                    InclusiveMaximum: 1000,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.weight",
                type: {
                    name: "Number"
                }
            },
            enabled: {
                serializedName: "properties.enabled",
                type: {
                    name: "Boolean"
                }
            },
            privateLinkAlias: {
                serializedName: "properties.privateLinkAlias",
                type: {
                    name: "String"
                }
            },
            privateLinkResourceId: {
                serializedName: "properties.privateLinkResourceId",
                type: {
                    name: "String"
                }
            },
            privateLinkLocation: {
                serializedName: "properties.privateLinkLocation",
                type: {
                    name: "String"
                }
            },
            privateLinkApprovalMessage: {
                serializedName: "properties.privateLinkApprovalMessage",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const OriginGroupListResult = {
    type: {
        name: "Composite",
        className: "OriginGroupListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "OriginGroup"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const OriginGroupUpdatePropertiesParameters = {
    type: {
        name: "Composite",
        className: "OriginGroupUpdatePropertiesParameters",
        modelProperties: {
            healthProbeSettings: {
                serializedName: "healthProbeSettings",
                type: {
                    name: "Composite",
                    className: "HealthProbeParameters"
                }
            },
            origins: {
                serializedName: "origins",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceReference"
                        }
                    }
                }
            },
            trafficRestorationTimeToHealedOrNewEndpointsInMinutes: {
                constraints: {
                    InclusiveMaximum: 50,
                    InclusiveMinimum: 0
                },
                serializedName: "trafficRestorationTimeToHealedOrNewEndpointsInMinutes",
                type: {
                    name: "Number"
                }
            },
            responseBasedOriginErrorDetectionSettings: {
                serializedName: "responseBasedOriginErrorDetectionSettings",
                type: {
                    name: "Composite",
                    className: "ResponseBasedOriginErrorDetectionParameters"
                }
            }
        }
    }
};
export const OriginGroupUpdateParameters = {
    type: {
        name: "Composite",
        className: "OriginGroupUpdateParameters",
        modelProperties: {
            healthProbeSettings: {
                serializedName: "properties.healthProbeSettings",
                type: {
                    name: "Composite",
                    className: "HealthProbeParameters"
                }
            },
            origins: {
                serializedName: "properties.origins",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceReference"
                        }
                    }
                }
            },
            trafficRestorationTimeToHealedOrNewEndpointsInMinutes: {
                constraints: {
                    InclusiveMaximum: 50,
                    InclusiveMinimum: 0
                },
                serializedName: "properties.trafficRestorationTimeToHealedOrNewEndpointsInMinutes",
                type: {
                    name: "Number"
                }
            },
            responseBasedOriginErrorDetectionSettings: {
                serializedName: "properties.responseBasedOriginErrorDetectionSettings",
                type: {
                    name: "Composite",
                    className: "ResponseBasedOriginErrorDetectionParameters"
                }
            }
        }
    }
};
export const CustomDomainListResult = {
    type: {
        name: "Composite",
        className: "CustomDomainListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CustomDomain"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CustomDomainHttpsParameters = {
    type: {
        name: "Composite",
        className: "CustomDomainHttpsParameters",
        uberParent: "CustomDomainHttpsParameters",
        polymorphicDiscriminator: {
            serializedName: "certificateSource",
            clientName: "certificateSource"
        },
        modelProperties: {
            certificateSource: {
                serializedName: "certificateSource",
                required: true,
                type: {
                    name: "String"
                }
            },
            protocolType: {
                serializedName: "protocolType",
                required: true,
                type: {
                    name: "String"
                }
            },
            minimumTlsVersion: {
                serializedName: "minimumTlsVersion",
                type: {
                    name: "Enum",
                    allowedValues: ["None", "TLS10", "TLS12"]
                }
            }
        }
    }
};
export const CustomDomainParameters = {
    type: {
        name: "Composite",
        className: "CustomDomainParameters",
        modelProperties: {
            hostName: {
                serializedName: "properties.hostName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CheckNameAvailabilityInput = {
    type: {
        name: "Composite",
        className: "CheckNameAvailabilityInput",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ValidateProbeInput = {
    type: {
        name: "Composite",
        className: "ValidateProbeInput",
        modelProperties: {
            probeURL: {
                serializedName: "probeURL",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ValidateProbeOutput = {
    type: {
        name: "Composite",
        className: "ValidateProbeOutput",
        modelProperties: {
            isValid: {
                serializedName: "isValid",
                readOnly: true,
                type: {
                    name: "Boolean"
                }
            },
            errorCode: {
                serializedName: "errorCode",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const OperationsListResult = {
    type: {
        name: "Composite",
        className: "OperationsListResult",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Operation"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Operation = {
    type: {
        name: "Composite",
        className: "Operation",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            isDataAction: {
                serializedName: "isDataAction",
                type: {
                    name: "Boolean"
                }
            },
            display: {
                serializedName: "display",
                type: {
                    name: "Composite",
                    className: "OperationDisplay"
                }
            },
            origin: {
                serializedName: "origin",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            serviceSpecification: {
                serializedName: "properties.serviceSpecification",
                type: {
                    name: "Composite",
                    className: "ServiceSpecification"
                }
            }
        }
    }
};
export const OperationDisplay = {
    type: {
        name: "Composite",
        className: "OperationDisplay",
        modelProperties: {
            provider: {
                serializedName: "provider",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            resource: {
                serializedName: "resource",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            operation: {
                serializedName: "operation",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ServiceSpecification = {
    type: {
        name: "Composite",
        className: "ServiceSpecification",
        modelProperties: {
            logSpecifications: {
                serializedName: "logSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LogSpecification"
                        }
                    }
                }
            },
            metricSpecifications: {
                serializedName: "metricSpecifications",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetricSpecification"
                        }
                    }
                }
            }
        }
    }
};
export const LogSpecification = {
    type: {
        name: "Composite",
        className: "LogSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                type: {
                    name: "String"
                }
            },
            logFilterPattern: {
                serializedName: "logFilterPattern",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const MetricSpecification = {
    type: {
        name: "Composite",
        className: "MetricSpecification",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            displayDescription: {
                serializedName: "displayDescription",
                type: {
                    name: "String"
                }
            },
            unit: {
                serializedName: "unit",
                type: {
                    name: "String"
                }
            },
            aggregationType: {
                serializedName: "aggregationType",
                type: {
                    name: "String"
                }
            },
            availabilities: {
                serializedName: "availabilities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetricAvailability"
                        }
                    }
                }
            },
            supportedTimeGrainTypes: {
                serializedName: "supportedTimeGrainTypes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            dimensions: {
                serializedName: "dimensions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DimensionProperties"
                        }
                    }
                }
            },
            fillGapWithZero: {
                serializedName: "fillGapWithZero",
                type: {
                    name: "Boolean"
                }
            },
            metricFilterPattern: {
                serializedName: "metricFilterPattern",
                type: {
                    name: "String"
                }
            },
            isInternal: {
                serializedName: "isInternal",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const MetricAvailability = {
    type: {
        name: "Composite",
        className: "MetricAvailability",
        modelProperties: {
            timeGrain: {
                serializedName: "timeGrain",
                type: {
                    name: "String"
                }
            },
            blobDuration: {
                serializedName: "blobDuration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const DimensionProperties = {
    type: {
        name: "Composite",
        className: "DimensionProperties",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String"
                }
            },
            displayName: {
                serializedName: "displayName",
                type: {
                    name: "String"
                }
            },
            internalName: {
                serializedName: "internalName",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const EdgenodeResult = {
    type: {
        name: "Composite",
        className: "EdgenodeResult",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "EdgeNode"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const IpAddressGroup = {
    type: {
        name: "Composite",
        className: "IpAddressGroup",
        modelProperties: {
            deliveryRegion: {
                serializedName: "deliveryRegion",
                type: {
                    name: "String"
                }
            },
            ipv4Addresses: {
                serializedName: "ipv4Addresses",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CidrIpAddress"
                        }
                    }
                }
            },
            ipv6Addresses: {
                serializedName: "ipv6Addresses",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CidrIpAddress"
                        }
                    }
                }
            }
        }
    }
};
export const CidrIpAddress = {
    type: {
        name: "Composite",
        className: "CidrIpAddress",
        modelProperties: {
            baseIpAddress: {
                serializedName: "baseIpAddress",
                type: {
                    name: "String"
                }
            },
            prefixLength: {
                serializedName: "prefixLength",
                type: {
                    name: "Number"
                }
            }
        }
    }
};
export const CdnWebApplicationFirewallPolicyList = {
    type: {
        name: "Composite",
        className: "CdnWebApplicationFirewallPolicyList",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CdnWebApplicationFirewallPolicy"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const PolicySettings = {
    type: {
        name: "Composite",
        className: "PolicySettings",
        modelProperties: {
            enabledState: {
                serializedName: "enabledState",
                type: {
                    name: "String"
                }
            },
            mode: {
                serializedName: "mode",
                type: {
                    name: "String"
                }
            },
            defaultRedirectUrl: {
                serializedName: "defaultRedirectUrl",
                type: {
                    name: "String"
                }
            },
            defaultCustomBlockResponseStatusCode: {
                serializedName: "defaultCustomBlockResponseStatusCode",
                type: {
                    name: "Number"
                }
            },
            defaultCustomBlockResponseBody: {
                constraints: {
                    Pattern: new RegExp("^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$")
                },
                serializedName: "defaultCustomBlockResponseBody",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const RateLimitRuleList = {
    type: {
        name: "Composite",
        className: "RateLimitRuleList",
        modelProperties: {
            rules: {
                serializedName: "rules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RateLimitRule"
                        }
                    }
                }
            }
        }
    }
};
export const CustomRule = {
    type: {
        name: "Composite",
        className: "CustomRule",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String"
                }
            },
            enabledState: {
                serializedName: "enabledState",
                type: {
                    name: "String"
                }
            },
            priority: {
                constraints: {
                    InclusiveMaximum: 1000,
                    InclusiveMinimum: 0
                },
                serializedName: "priority",
                required: true,
                type: {
                    name: "Number"
                }
            },
            matchConditions: {
                serializedName: "matchConditions",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MatchCondition"
                        }
                    }
                }
            },
            action: {
                serializedName: "action",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const MatchCondition = {
    type: {
        name: "Composite",
        className: "MatchCondition",
        modelProperties: {
            matchVariable: {
                serializedName: "matchVariable",
                required: true,
                type: {
                    name: "String"
                }
            },
            selector: {
                serializedName: "selector",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            negateCondition: {
                serializedName: "negateCondition",
                type: {
                    name: "Boolean"
                }
            },
            matchValue: {
                serializedName: "matchValue",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            transforms: {
                serializedName: "transforms",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const CustomRuleList = {
    type: {
        name: "Composite",
        className: "CustomRuleList",
        modelProperties: {
            rules: {
                serializedName: "rules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CustomRule"
                        }
                    }
                }
            }
        }
    }
};
export const ManagedRuleSetList = {
    type: {
        name: "Composite",
        className: "ManagedRuleSetList",
        modelProperties: {
            managedRuleSets: {
                serializedName: "managedRuleSets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedRuleSet"
                        }
                    }
                }
            }
        }
    }
};
export const ManagedRuleSet = {
    type: {
        name: "Composite",
        className: "ManagedRuleSet",
        modelProperties: {
            ruleSetType: {
                serializedName: "ruleSetType",
                required: true,
                type: {
                    name: "String"
                }
            },
            ruleSetVersion: {
                serializedName: "ruleSetVersion",
                required: true,
                type: {
                    name: "String"
                }
            },
            anomalyScore: {
                constraints: {
                    InclusiveMaximum: 20,
                    InclusiveMinimum: 0
                },
                serializedName: "anomalyScore",
                type: {
                    name: "Number"
                }
            },
            ruleGroupOverrides: {
                serializedName: "ruleGroupOverrides",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedRuleGroupOverride"
                        }
                    }
                }
            }
        }
    }
};
export const ManagedRuleGroupOverride = {
    type: {
        name: "Composite",
        className: "ManagedRuleGroupOverride",
        modelProperties: {
            ruleGroupName: {
                serializedName: "ruleGroupName",
                required: true,
                type: {
                    name: "String"
                }
            },
            rules: {
                serializedName: "rules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedRuleOverride"
                        }
                    }
                }
            }
        }
    }
};
export const ManagedRuleOverride = {
    type: {
        name: "Composite",
        className: "ManagedRuleOverride",
        modelProperties: {
            ruleId: {
                serializedName: "ruleId",
                required: true,
                type: {
                    name: "String"
                }
            },
            enabledState: {
                serializedName: "enabledState",
                type: {
                    name: "String"
                }
            },
            action: {
                serializedName: "action",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CdnEndpoint = {
    type: {
        name: "Composite",
        className: "CdnEndpoint",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CdnWebApplicationFirewallPolicyPatchParameters = {
    type: {
        name: "Composite",
        className: "CdnWebApplicationFirewallPolicyPatchParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            }
        }
    }
};
export const ManagedRuleSetDefinitionList = {
    type: {
        name: "Composite",
        className: "ManagedRuleSetDefinitionList",
        modelProperties: {
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedRuleSetDefinition"
                        }
                    }
                }
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const ManagedRuleGroupDefinition = {
    type: {
        name: "Composite",
        className: "ManagedRuleGroupDefinition",
        modelProperties: {
            ruleGroupName: {
                serializedName: "ruleGroupName",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            rules: {
                serializedName: "rules",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedRuleDefinition"
                        }
                    }
                }
            }
        }
    }
};
export const ManagedRuleDefinition = {
    type: {
        name: "Composite",
        className: "ManagedRuleDefinition",
        modelProperties: {
            ruleId: {
                serializedName: "ruleId",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            description: {
                serializedName: "description",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const Certificate = {
    type: {
        name: "Composite",
        className: "Certificate",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String"
                }
            },
            subject: {
                serializedName: "subject",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            expirationDate: {
                serializedName: "expirationDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const SecurityPolicyWebApplicationFirewallAssociation = {
    type: {
        name: "Composite",
        className: "SecurityPolicyWebApplicationFirewallAssociation",
        modelProperties: {
            domains: {
                serializedName: "domains",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ActivatedResourceReference"
                        }
                    }
                }
            },
            patternsToMatch: {
                serializedName: "patternsToMatch",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const ValidationToken = {
    type: {
        name: "Composite",
        className: "ValidationToken",
        modelProperties: {
            token: {
                serializedName: "token",
                readOnly: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const RemoteAddressMatchConditionParameters = {
    type: {
        name: "Composite",
        className: "RemoteAddressMatchConditionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleRemoteAddressConditionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            negateCondition: {
                serializedName: "negateCondition",
                type: {
                    name: "Boolean"
                }
            },
            matchValues: {
                serializedName: "matchValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            transforms: {
                serializedName: "transforms",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const RequestMethodMatchConditionParameters = {
    type: {
        name: "Composite",
        className: "RequestMethodMatchConditionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleRequestMethodConditionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            negateCondition: {
                serializedName: "negateCondition",
                type: {
                    name: "Boolean"
                }
            },
            transforms: {
                serializedName: "transforms",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            matchValues: {
                serializedName: "matchValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const QueryStringMatchConditionParameters = {
    type: {
        name: "Composite",
        className: "QueryStringMatchConditionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleQueryStringConditionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            negateCondition: {
                serializedName: "negateCondition",
                type: {
                    name: "Boolean"
                }
            },
            matchValues: {
                serializedName: "matchValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            transforms: {
                serializedName: "transforms",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const PostArgsMatchConditionParameters = {
    type: {
        name: "Composite",
        className: "PostArgsMatchConditionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRulePostArgsConditionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            selector: {
                serializedName: "selector",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            negateCondition: {
                serializedName: "negateCondition",
                type: {
                    name: "Boolean"
                }
            },
            matchValues: {
                serializedName: "matchValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            transforms: {
                serializedName: "transforms",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const RequestUriMatchConditionParameters = {
    type: {
        name: "Composite",
        className: "RequestUriMatchConditionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleRequestUriConditionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            negateCondition: {
                serializedName: "negateCondition",
                type: {
                    name: "Boolean"
                }
            },
            matchValues: {
                serializedName: "matchValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            transforms: {
                serializedName: "transforms",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const RequestHeaderMatchConditionParameters = {
    type: {
        name: "Composite",
        className: "RequestHeaderMatchConditionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleRequestHeaderConditionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            selector: {
                serializedName: "selector",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            negateCondition: {
                serializedName: "negateCondition",
                type: {
                    name: "Boolean"
                }
            },
            matchValues: {
                serializedName: "matchValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            transforms: {
                serializedName: "transforms",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const RequestBodyMatchConditionParameters = {
    type: {
        name: "Composite",
        className: "RequestBodyMatchConditionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleRequestBodyConditionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            negateCondition: {
                serializedName: "negateCondition",
                type: {
                    name: "Boolean"
                }
            },
            matchValues: {
                serializedName: "matchValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            transforms: {
                serializedName: "transforms",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const RequestSchemeMatchConditionParameters = {
    type: {
        name: "Composite",
        className: "RequestSchemeMatchConditionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleRequestSchemeConditionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            operator: {
                defaultValue: "Equal",
                isConstant: true,
                serializedName: "operator",
                type: {
                    name: "String"
                }
            },
            negateCondition: {
                serializedName: "negateCondition",
                type: {
                    name: "Boolean"
                }
            },
            transforms: {
                serializedName: "transforms",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            matchValues: {
                serializedName: "matchValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const UrlPathMatchConditionParameters = {
    type: {
        name: "Composite",
        className: "UrlPathMatchConditionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleUrlPathMatchConditionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            negateCondition: {
                serializedName: "negateCondition",
                type: {
                    name: "Boolean"
                }
            },
            matchValues: {
                serializedName: "matchValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            transforms: {
                serializedName: "transforms",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const UrlFileExtensionMatchConditionParameters = {
    type: {
        name: "Composite",
        className: "UrlFileExtensionMatchConditionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleUrlFileExtensionMatchConditionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            negateCondition: {
                serializedName: "negateCondition",
                type: {
                    name: "Boolean"
                }
            },
            matchValues: {
                serializedName: "matchValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            transforms: {
                serializedName: "transforms",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const UrlFileNameMatchConditionParameters = {
    type: {
        name: "Composite",
        className: "UrlFileNameMatchConditionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleUrlFilenameConditionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            negateCondition: {
                serializedName: "negateCondition",
                type: {
                    name: "Boolean"
                }
            },
            matchValues: {
                serializedName: "matchValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            transforms: {
                serializedName: "transforms",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const HttpVersionMatchConditionParameters = {
    type: {
        name: "Composite",
        className: "HttpVersionMatchConditionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleHttpVersionConditionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            negateCondition: {
                serializedName: "negateCondition",
                type: {
                    name: "Boolean"
                }
            },
            matchValues: {
                serializedName: "matchValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            transforms: {
                serializedName: "transforms",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const CookiesMatchConditionParameters = {
    type: {
        name: "Composite",
        className: "CookiesMatchConditionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleCookiesConditionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            selector: {
                serializedName: "selector",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            negateCondition: {
                serializedName: "negateCondition",
                type: {
                    name: "Boolean"
                }
            },
            matchValues: {
                serializedName: "matchValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            transforms: {
                serializedName: "transforms",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const IsDeviceMatchConditionParameters = {
    type: {
        name: "Composite",
        className: "IsDeviceMatchConditionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleIsDeviceConditionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            negateCondition: {
                serializedName: "negateCondition",
                type: {
                    name: "Boolean"
                }
            },
            matchValues: {
                serializedName: "matchValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            transforms: {
                serializedName: "transforms",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const SocketAddrMatchConditionParameters = {
    type: {
        name: "Composite",
        className: "SocketAddrMatchConditionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleSocketAddrConditionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            negateCondition: {
                serializedName: "negateCondition",
                type: {
                    name: "Boolean"
                }
            },
            matchValues: {
                serializedName: "matchValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            transforms: {
                serializedName: "transforms",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const ClientPortMatchConditionParameters = {
    type: {
        name: "Composite",
        className: "ClientPortMatchConditionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleClientPortConditionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            negateCondition: {
                serializedName: "negateCondition",
                type: {
                    name: "Boolean"
                }
            },
            matchValues: {
                serializedName: "matchValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            transforms: {
                serializedName: "transforms",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const ServerPortMatchConditionParameters = {
    type: {
        name: "Composite",
        className: "ServerPortMatchConditionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleServerPortConditionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            negateCondition: {
                serializedName: "negateCondition",
                type: {
                    name: "Boolean"
                }
            },
            matchValues: {
                serializedName: "matchValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            transforms: {
                serializedName: "transforms",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const HostNameMatchConditionParameters = {
    type: {
        name: "Composite",
        className: "HostNameMatchConditionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleHostNameConditionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            negateCondition: {
                serializedName: "negateCondition",
                type: {
                    name: "Boolean"
                }
            },
            matchValues: {
                serializedName: "matchValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            transforms: {
                serializedName: "transforms",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const SslProtocolMatchConditionParameters = {
    type: {
        name: "Composite",
        className: "SslProtocolMatchConditionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleSslProtocolConditionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String"
                }
            },
            negateCondition: {
                serializedName: "negateCondition",
                type: {
                    name: "Boolean"
                }
            },
            matchValues: {
                serializedName: "matchValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            },
            transforms: {
                serializedName: "transforms",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }
        }
    }
};
export const UrlRedirectActionParameters = {
    type: {
        name: "Composite",
        className: "UrlRedirectActionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleUrlRedirectActionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            redirectType: {
                serializedName: "redirectType",
                required: true,
                type: {
                    name: "String"
                }
            },
            destinationProtocol: {
                serializedName: "destinationProtocol",
                type: {
                    name: "String"
                }
            },
            customPath: {
                serializedName: "customPath",
                type: {
                    name: "String"
                }
            },
            customHostname: {
                serializedName: "customHostname",
                type: {
                    name: "String"
                }
            },
            customQueryString: {
                serializedName: "customQueryString",
                type: {
                    name: "String"
                }
            },
            customFragment: {
                serializedName: "customFragment",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const UrlSigningActionParameters = {
    type: {
        name: "Composite",
        className: "UrlSigningActionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleUrlSigningActionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            algorithm: {
                serializedName: "algorithm",
                type: {
                    name: "String"
                }
            },
            parameterNameOverride: {
                serializedName: "parameterNameOverride",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UrlSigningParamIdentifier"
                        }
                    }
                }
            }
        }
    }
};
export const UrlSigningParamIdentifier = {
    type: {
        name: "Composite",
        className: "UrlSigningParamIdentifier",
        modelProperties: {
            paramIndicator: {
                serializedName: "paramIndicator",
                required: true,
                type: {
                    name: "String"
                }
            },
            paramName: {
                serializedName: "paramName",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const OriginGroupOverrideActionParameters = {
    type: {
        name: "Composite",
        className: "OriginGroupOverrideActionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleOriginGroupOverrideActionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            originGroup: {
                serializedName: "originGroup",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            }
        }
    }
};
export const UrlRewriteActionParameters = {
    type: {
        name: "Composite",
        className: "UrlRewriteActionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleUrlRewriteActionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            sourcePattern: {
                serializedName: "sourcePattern",
                required: true,
                type: {
                    name: "String"
                }
            },
            destination: {
                serializedName: "destination",
                required: true,
                type: {
                    name: "String"
                }
            },
            preserveUnmatchedPath: {
                serializedName: "preserveUnmatchedPath",
                type: {
                    name: "Boolean"
                }
            }
        }
    }
};
export const HeaderActionParameters = {
    type: {
        name: "Composite",
        className: "HeaderActionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleHeaderActionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            headerAction: {
                serializedName: "headerAction",
                required: true,
                type: {
                    name: "String"
                }
            },
            headerName: {
                serializedName: "headerName",
                required: true,
                type: {
                    name: "String"
                }
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CacheExpirationActionParameters = {
    type: {
        name: "Composite",
        className: "CacheExpirationActionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleCacheExpirationActionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            cacheBehavior: {
                serializedName: "cacheBehavior",
                required: true,
                type: {
                    name: "String"
                }
            },
            cacheType: {
                serializedName: "cacheType",
                required: true,
                type: {
                    name: "String"
                }
            },
            cacheDuration: {
                serializedName: "cacheDuration",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CacheKeyQueryStringActionParameters = {
    type: {
        name: "Composite",
        className: "CacheKeyQueryStringActionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleCacheKeyQueryStringBehaviorActionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            queryStringBehavior: {
                serializedName: "queryStringBehavior",
                required: true,
                type: {
                    name: "String"
                }
            },
            queryParameters: {
                serializedName: "queryParameters",
                nullable: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const RouteConfigurationOverrideActionParameters = {
    type: {
        name: "Composite",
        className: "RouteConfigurationOverrideActionParameters",
        modelProperties: {
            typeName: {
                defaultValue: "DeliveryRuleRouteConfigurationOverrideActionParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            originGroupOverride: {
                serializedName: "originGroupOverride",
                type: {
                    name: "Composite",
                    className: "OriginGroupOverride"
                }
            },
            cacheConfiguration: {
                serializedName: "cacheConfiguration",
                type: {
                    name: "Composite",
                    className: "CacheConfiguration"
                }
            }
        }
    }
};
export const OriginGroupOverride = {
    type: {
        name: "Composite",
        className: "OriginGroupOverride",
        modelProperties: {
            originGroup: {
                serializedName: "originGroup",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            },
            forwardingProtocol: {
                serializedName: "forwardingProtocol",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CacheConfiguration = {
    type: {
        name: "Composite",
        className: "CacheConfiguration",
        modelProperties: {
            queryStringCachingBehavior: {
                serializedName: "queryStringCachingBehavior",
                type: {
                    name: "String"
                }
            },
            queryParameters: {
                serializedName: "queryParameters",
                type: {
                    name: "String"
                }
            },
            isCompressionEnabled: {
                serializedName: "isCompressionEnabled",
                type: {
                    name: "String"
                }
            },
            cacheBehavior: {
                serializedName: "cacheBehavior",
                type: {
                    name: "String"
                }
            },
            cacheDuration: {
                serializedName: "cacheDuration",
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const CdnCertificateSourceParameters = {
    type: {
        name: "Composite",
        className: "CdnCertificateSourceParameters",
        modelProperties: {
            typeName: {
                defaultValue: "CdnCertificateSourceParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            certificateType: {
                serializedName: "certificateType",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const KeyVaultCertificateSourceParameters = {
    type: {
        name: "Composite",
        className: "KeyVaultCertificateSourceParameters",
        modelProperties: {
            typeName: {
                defaultValue: "KeyVaultCertificateSourceParameters",
                isConstant: true,
                serializedName: "typeName",
                type: {
                    name: "String"
                }
            },
            subscriptionId: {
                serializedName: "subscriptionId",
                required: true,
                type: {
                    name: "String"
                }
            },
            resourceGroupName: {
                serializedName: "resourceGroupName",
                required: true,
                type: {
                    name: "String"
                }
            },
            vaultName: {
                serializedName: "vaultName",
                required: true,
                type: {
                    name: "String"
                }
            },
            secretName: {
                serializedName: "secretName",
                required: true,
                type: {
                    name: "String"
                }
            },
            secretVersion: {
                serializedName: "secretVersion",
                type: {
                    name: "String"
                }
            },
            updateRule: {
                serializedName: "updateRule",
                required: true,
                type: {
                    name: "String"
                }
            },
            deleteRule: {
                serializedName: "deleteRule",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
export const AFDDomainProperties = {
    type: {
        name: "Composite",
        className: "AFDDomainProperties",
        modelProperties: Object.assign(Object.assign(Object.assign({}, AFDDomainUpdatePropertiesParameters.type.modelProperties), AFDStateProperties.type.modelProperties), { domainValidationState: {
                serializedName: "domainValidationState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, hostName: {
                serializedName: "hostName",
                required: true,
                type: {
                    name: "String"
                }
            }, validationProperties: {
                serializedName: "validationProperties",
                type: {
                    name: "Composite",
                    className: "DomainValidationProperties"
                }
            } })
    }
};
export const AFDEndpointProperties = {
    type: {
        name: "Composite",
        className: "AFDEndpointProperties",
        modelProperties: Object.assign(Object.assign(Object.assign({}, AFDEndpointPropertiesUpdateParameters.type.modelProperties), AFDStateProperties.type.modelProperties), { hostName: {
                serializedName: "hostName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, autoGeneratedDomainNameLabelScope: {
                serializedName: "autoGeneratedDomainNameLabelScope",
                type: {
                    name: "String"
                }
            } })
    }
};
export const AFDOriginGroupProperties = {
    type: {
        name: "Composite",
        className: "AFDOriginGroupProperties",
        modelProperties: Object.assign(Object.assign({}, AFDOriginGroupUpdatePropertiesParameters.type.modelProperties), AFDStateProperties.type.modelProperties)
    }
};
export const AFDOriginProperties = {
    type: {
        name: "Composite",
        className: "AFDOriginProperties",
        modelProperties: Object.assign(Object.assign({}, AFDOriginUpdatePropertiesParameters.type.modelProperties), AFDStateProperties.type.modelProperties)
    }
};
export const RouteProperties = {
    type: {
        name: "Composite",
        className: "RouteProperties",
        modelProperties: Object.assign(Object.assign({}, RouteUpdatePropertiesParameters.type.modelProperties), AFDStateProperties.type.modelProperties)
    }
};
export const RuleSetProperties = {
    type: {
        name: "Composite",
        className: "RuleSetProperties",
        modelProperties: Object.assign(Object.assign({}, AFDStateProperties.type.modelProperties), { profileName: {
                serializedName: "profileName",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const RuleProperties = {
    type: {
        name: "Composite",
        className: "RuleProperties",
        modelProperties: Object.assign(Object.assign({}, RuleUpdatePropertiesParameters.type.modelProperties), AFDStateProperties.type.modelProperties)
    }
};
export const SecurityPolicyProperties = {
    type: {
        name: "Composite",
        className: "SecurityPolicyProperties",
        modelProperties: Object.assign(Object.assign({}, AFDStateProperties.type.modelProperties), { profileName: {
                serializedName: "profileName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "SecurityPolicyPropertiesParameters"
                }
            } })
    }
};
export const SecretProperties = {
    type: {
        name: "Composite",
        className: "SecretProperties",
        modelProperties: Object.assign(Object.assign({}, AFDStateProperties.type.modelProperties), { profileName: {
                serializedName: "profileName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "SecretParameters"
                }
            } })
    }
};
export const ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, Resource.type.modelProperties)
    }
};
export const TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String"
                }
            }, tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } }
                }
            } })
    }
};
export const ManagedRuleSetDefinition = {
    type: {
        name: "Composite",
        className: "ManagedRuleSetDefinition",
        modelProperties: Object.assign(Object.assign({}, Resource.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, ruleSetType: {
                serializedName: "properties.ruleSetType",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, ruleSetVersion: {
                serializedName: "properties.ruleSetVersion",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, ruleGroups: {
                serializedName: "properties.ruleGroups",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ManagedRuleGroupDefinition"
                        }
                    }
                }
            } })
    }
};
export const DeliveryRuleRemoteAddressCondition = {
    serializedName: "RemoteAddress",
    type: {
        name: "Composite",
        className: "DeliveryRuleRemoteAddressCondition",
        uberParent: "DeliveryRuleCondition",
        polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleCondition.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "RemoteAddressMatchConditionParameters"
                }
            } })
    }
};
export const DeliveryRuleRequestMethodCondition = {
    serializedName: "RequestMethod",
    type: {
        name: "Composite",
        className: "DeliveryRuleRequestMethodCondition",
        uberParent: "DeliveryRuleCondition",
        polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleCondition.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "RequestMethodMatchConditionParameters"
                }
            } })
    }
};
export const DeliveryRuleQueryStringCondition = {
    serializedName: "QueryString",
    type: {
        name: "Composite",
        className: "DeliveryRuleQueryStringCondition",
        uberParent: "DeliveryRuleCondition",
        polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleCondition.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "QueryStringMatchConditionParameters"
                }
            } })
    }
};
export const DeliveryRulePostArgsCondition = {
    serializedName: "PostArgs",
    type: {
        name: "Composite",
        className: "DeliveryRulePostArgsCondition",
        uberParent: "DeliveryRuleCondition",
        polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleCondition.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "PostArgsMatchConditionParameters"
                }
            } })
    }
};
export const DeliveryRuleRequestUriCondition = {
    serializedName: "RequestUri",
    type: {
        name: "Composite",
        className: "DeliveryRuleRequestUriCondition",
        uberParent: "DeliveryRuleCondition",
        polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleCondition.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "RequestUriMatchConditionParameters"
                }
            } })
    }
};
export const DeliveryRuleRequestHeaderCondition = {
    serializedName: "RequestHeader",
    type: {
        name: "Composite",
        className: "DeliveryRuleRequestHeaderCondition",
        uberParent: "DeliveryRuleCondition",
        polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleCondition.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "RequestHeaderMatchConditionParameters"
                }
            } })
    }
};
export const DeliveryRuleRequestBodyCondition = {
    serializedName: "RequestBody",
    type: {
        name: "Composite",
        className: "DeliveryRuleRequestBodyCondition",
        uberParent: "DeliveryRuleCondition",
        polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleCondition.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "RequestBodyMatchConditionParameters"
                }
            } })
    }
};
export const DeliveryRuleRequestSchemeCondition = {
    serializedName: "RequestScheme",
    type: {
        name: "Composite",
        className: "DeliveryRuleRequestSchemeCondition",
        uberParent: "DeliveryRuleCondition",
        polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleCondition.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "RequestSchemeMatchConditionParameters"
                }
            } })
    }
};
export const DeliveryRuleUrlPathCondition = {
    serializedName: "UrlPath",
    type: {
        name: "Composite",
        className: "DeliveryRuleUrlPathCondition",
        uberParent: "DeliveryRuleCondition",
        polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleCondition.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "UrlPathMatchConditionParameters"
                }
            } })
    }
};
export const DeliveryRuleUrlFileExtensionCondition = {
    serializedName: "UrlFileExtension",
    type: {
        name: "Composite",
        className: "DeliveryRuleUrlFileExtensionCondition",
        uberParent: "DeliveryRuleCondition",
        polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleCondition.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "UrlFileExtensionMatchConditionParameters"
                }
            } })
    }
};
export const DeliveryRuleUrlFileNameCondition = {
    serializedName: "UrlFileName",
    type: {
        name: "Composite",
        className: "DeliveryRuleUrlFileNameCondition",
        uberParent: "DeliveryRuleCondition",
        polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleCondition.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "UrlFileNameMatchConditionParameters"
                }
            } })
    }
};
export const DeliveryRuleHttpVersionCondition = {
    serializedName: "HttpVersion",
    type: {
        name: "Composite",
        className: "DeliveryRuleHttpVersionCondition",
        uberParent: "DeliveryRuleCondition",
        polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleCondition.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "HttpVersionMatchConditionParameters"
                }
            } })
    }
};
export const DeliveryRuleCookiesCondition = {
    serializedName: "Cookies",
    type: {
        name: "Composite",
        className: "DeliveryRuleCookiesCondition",
        uberParent: "DeliveryRuleCondition",
        polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleCondition.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "CookiesMatchConditionParameters"
                }
            } })
    }
};
export const DeliveryRuleIsDeviceCondition = {
    serializedName: "IsDevice",
    type: {
        name: "Composite",
        className: "DeliveryRuleIsDeviceCondition",
        uberParent: "DeliveryRuleCondition",
        polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleCondition.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "IsDeviceMatchConditionParameters"
                }
            } })
    }
};
export const DeliveryRuleSocketAddrCondition = {
    serializedName: "SocketAddr",
    type: {
        name: "Composite",
        className: "DeliveryRuleSocketAddrCondition",
        uberParent: "DeliveryRuleCondition",
        polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleCondition.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "SocketAddrMatchConditionParameters"
                }
            } })
    }
};
export const DeliveryRuleClientPortCondition = {
    serializedName: "ClientPort",
    type: {
        name: "Composite",
        className: "DeliveryRuleClientPortCondition",
        uberParent: "DeliveryRuleCondition",
        polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleCondition.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "ClientPortMatchConditionParameters"
                }
            } })
    }
};
export const DeliveryRuleServerPortCondition = {
    serializedName: "ServerPort",
    type: {
        name: "Composite",
        className: "DeliveryRuleServerPortCondition",
        uberParent: "DeliveryRuleCondition",
        polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleCondition.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "ServerPortMatchConditionParameters"
                }
            } })
    }
};
export const DeliveryRuleHostNameCondition = {
    serializedName: "HostName",
    type: {
        name: "Composite",
        className: "DeliveryRuleHostNameCondition",
        uberParent: "DeliveryRuleCondition",
        polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleCondition.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "HostNameMatchConditionParameters"
                }
            } })
    }
};
export const DeliveryRuleSslProtocolCondition = {
    serializedName: "SslProtocol",
    type: {
        name: "Composite",
        className: "DeliveryRuleSslProtocolCondition",
        uberParent: "DeliveryRuleCondition",
        polymorphicDiscriminator: DeliveryRuleCondition.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleCondition.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "SslProtocolMatchConditionParameters"
                }
            } })
    }
};
export const UrlRedirectAction = {
    serializedName: "UrlRedirect",
    type: {
        name: "Composite",
        className: "UrlRedirectAction",
        uberParent: "DeliveryRuleActionAutoGenerated",
        polymorphicDiscriminator: DeliveryRuleActionAutoGenerated.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleActionAutoGenerated.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "UrlRedirectActionParameters"
                }
            } })
    }
};
export const UrlSigningAction = {
    serializedName: "UrlSigning",
    type: {
        name: "Composite",
        className: "UrlSigningAction",
        uberParent: "DeliveryRuleActionAutoGenerated",
        polymorphicDiscriminator: DeliveryRuleActionAutoGenerated.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleActionAutoGenerated.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "UrlSigningActionParameters"
                }
            } })
    }
};
export const OriginGroupOverrideAction = {
    serializedName: "OriginGroupOverride",
    type: {
        name: "Composite",
        className: "OriginGroupOverrideAction",
        uberParent: "DeliveryRuleActionAutoGenerated",
        polymorphicDiscriminator: DeliveryRuleActionAutoGenerated.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleActionAutoGenerated.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "OriginGroupOverrideActionParameters"
                }
            } })
    }
};
export const UrlRewriteAction = {
    serializedName: "UrlRewrite",
    type: {
        name: "Composite",
        className: "UrlRewriteAction",
        uberParent: "DeliveryRuleActionAutoGenerated",
        polymorphicDiscriminator: DeliveryRuleActionAutoGenerated.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleActionAutoGenerated.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "UrlRewriteActionParameters"
                }
            } })
    }
};
export const DeliveryRuleRequestHeaderAction = {
    serializedName: "ModifyRequestHeader",
    type: {
        name: "Composite",
        className: "DeliveryRuleRequestHeaderAction",
        uberParent: "DeliveryRuleActionAutoGenerated",
        polymorphicDiscriminator: DeliveryRuleActionAutoGenerated.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleActionAutoGenerated.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "HeaderActionParameters"
                }
            } })
    }
};
export const DeliveryRuleResponseHeaderAction = {
    serializedName: "ModifyResponseHeader",
    type: {
        name: "Composite",
        className: "DeliveryRuleResponseHeaderAction",
        uberParent: "DeliveryRuleActionAutoGenerated",
        polymorphicDiscriminator: DeliveryRuleActionAutoGenerated.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleActionAutoGenerated.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "HeaderActionParameters"
                }
            } })
    }
};
export const DeliveryRuleCacheExpirationAction = {
    serializedName: "CacheExpiration",
    type: {
        name: "Composite",
        className: "DeliveryRuleCacheExpirationAction",
        uberParent: "DeliveryRuleActionAutoGenerated",
        polymorphicDiscriminator: DeliveryRuleActionAutoGenerated.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleActionAutoGenerated.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "CacheExpirationActionParameters"
                }
            } })
    }
};
export const DeliveryRuleCacheKeyQueryStringAction = {
    serializedName: "CacheKeyQueryString",
    type: {
        name: "Composite",
        className: "DeliveryRuleCacheKeyQueryStringAction",
        uberParent: "DeliveryRuleActionAutoGenerated",
        polymorphicDiscriminator: DeliveryRuleActionAutoGenerated.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleActionAutoGenerated.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "CacheKeyQueryStringActionParameters"
                }
            } })
    }
};
export const DeliveryRuleRouteConfigurationOverrideAction = {
    serializedName: "RouteConfigurationOverride",
    type: {
        name: "Composite",
        className: "DeliveryRuleRouteConfigurationOverrideAction",
        uberParent: "DeliveryRuleActionAutoGenerated",
        polymorphicDiscriminator: DeliveryRuleActionAutoGenerated.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, DeliveryRuleActionAutoGenerated.type.modelProperties), { parameters: {
                serializedName: "parameters",
                type: {
                    name: "Composite",
                    className: "RouteConfigurationOverrideActionParameters"
                }
            } })
    }
};
export const SecurityPolicyWebApplicationFirewallParameters = {
    serializedName: "WebApplicationFirewall",
    type: {
        name: "Composite",
        className: "SecurityPolicyWebApplicationFirewallParameters",
        uberParent: "SecurityPolicyPropertiesParameters",
        polymorphicDiscriminator: SecurityPolicyPropertiesParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SecurityPolicyPropertiesParameters.type.modelProperties), { wafPolicy: {
                serializedName: "wafPolicy",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            }, associations: {
                serializedName: "associations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SecurityPolicyWebApplicationFirewallAssociation"
                        }
                    }
                }
            } })
    }
};
export const UrlSigningKeyParameters = {
    serializedName: "UrlSigningKey",
    type: {
        name: "Composite",
        className: "UrlSigningKeyParameters",
        uberParent: "SecretParameters",
        polymorphicDiscriminator: SecretParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SecretParameters.type.modelProperties), { keyId: {
                serializedName: "keyId",
                required: true,
                type: {
                    name: "String"
                }
            }, secretSource: {
                serializedName: "secretSource",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            }, secretVersion: {
                serializedName: "secretVersion",
                type: {
                    name: "String"
                }
            } })
    }
};
export const ManagedCertificateParameters = {
    serializedName: "ManagedCertificate",
    type: {
        name: "Composite",
        className: "ManagedCertificateParameters",
        uberParent: "SecretParameters",
        polymorphicDiscriminator: SecretParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SecretParameters.type.modelProperties), { subject: {
                serializedName: "subject",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, expirationDate: {
                serializedName: "expirationDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const CustomerCertificateParameters = {
    serializedName: "CustomerCertificate",
    type: {
        name: "Composite",
        className: "CustomerCertificateParameters",
        uberParent: "SecretParameters",
        polymorphicDiscriminator: SecretParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, SecretParameters.type.modelProperties), { secretSource: {
                serializedName: "secretSource",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            }, secretVersion: {
                serializedName: "secretVersion",
                type: {
                    name: "String"
                }
            }, useLatestVersion: {
                serializedName: "useLatestVersion",
                type: {
                    name: "Boolean"
                }
            }, subject: {
                serializedName: "subject",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, expirationDate: {
                serializedName: "expirationDate",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, certificateAuthority: {
                serializedName: "certificateAuthority",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, subjectAlternativeNames: {
                serializedName: "subjectAlternativeNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, thumbprint: {
                serializedName: "thumbprint",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const AzureFirstPartyManagedCertificateParameters = {
    serializedName: "AzureFirstPartyManagedCertificate",
    type: {
        name: "Composite",
        className: "AzureFirstPartyManagedCertificateParameters",
        uberParent: "SecretParameters",
        polymorphicDiscriminator: SecretParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, SecretParameters.type.modelProperties)
    }
};
export const EndpointProperties = {
    type: {
        name: "Composite",
        className: "EndpointProperties",
        modelProperties: Object.assign(Object.assign({}, EndpointPropertiesUpdateParameters.type.modelProperties), { hostName: {
                serializedName: "hostName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, origins: {
                serializedName: "origins",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DeepCreatedOrigin"
                        }
                    }
                }
            }, originGroups: {
                serializedName: "originGroups",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DeepCreatedOriginGroup"
                        }
                    }
                }
            }, customDomains: {
                serializedName: "customDomains",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DeepCreatedCustomDomain"
                        }
                    }
                }
            }, resourceState: {
                serializedName: "resourceState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const OriginProperties = {
    type: {
        name: "Composite",
        className: "OriginProperties",
        modelProperties: Object.assign(Object.assign({}, OriginUpdatePropertiesParameters.type.modelProperties), { resourceState: {
                serializedName: "resourceState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, privateEndpointStatus: {
                serializedName: "privateEndpointStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const OriginGroupProperties = {
    type: {
        name: "Composite",
        className: "OriginGroupProperties",
        modelProperties: Object.assign(Object.assign({}, OriginGroupUpdatePropertiesParameters.type.modelProperties), { resourceState: {
                serializedName: "resourceState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const CdnManagedHttpsParameters = {
    serializedName: "Cdn",
    type: {
        name: "Composite",
        className: "CdnManagedHttpsParameters",
        uberParent: "CustomDomainHttpsParameters",
        polymorphicDiscriminator: CustomDomainHttpsParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CustomDomainHttpsParameters.type.modelProperties), { certificateSourceParameters: {
                serializedName: "certificateSourceParameters",
                type: {
                    name: "Composite",
                    className: "CdnCertificateSourceParameters"
                }
            } })
    }
};
export const UserManagedHttpsParameters = {
    serializedName: "AzureKeyVault",
    type: {
        name: "Composite",
        className: "UserManagedHttpsParameters",
        uberParent: "CustomDomainHttpsParameters",
        polymorphicDiscriminator: CustomDomainHttpsParameters.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, CustomDomainHttpsParameters.type.modelProperties), { certificateSourceParameters: {
                serializedName: "certificateSourceParameters",
                type: {
                    name: "Composite",
                    className: "KeyVaultCertificateSourceParameters"
                }
            } })
    }
};
export const RateLimitRule = {
    type: {
        name: "Composite",
        className: "RateLimitRule",
        modelProperties: Object.assign(Object.assign({}, CustomRule.type.modelProperties), { rateLimitThreshold: {
                constraints: {
                    InclusiveMinimum: 0
                },
                serializedName: "rateLimitThreshold",
                required: true,
                type: {
                    name: "Number"
                }
            }, rateLimitDurationInMinutes: {
                constraints: {
                    InclusiveMaximum: 60,
                    InclusiveMinimum: 0
                },
                serializedName: "rateLimitDurationInMinutes",
                required: true,
                type: {
                    name: "Number"
                }
            } })
    }
};
export const ManagedCertificate = {
    type: {
        name: "Composite",
        className: "ManagedCertificate",
        modelProperties: Object.assign({}, Certificate.type.modelProperties)
    }
};
export const CustomerCertificate = {
    type: {
        name: "Composite",
        className: "CustomerCertificate",
        modelProperties: Object.assign(Object.assign({}, Certificate.type.modelProperties), { secretSource: {
                serializedName: "secretSource",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            }, secretVersion: {
                serializedName: "secretVersion",
                type: {
                    name: "String"
                }
            }, certificateAuthority: {
                serializedName: "certificateAuthority",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, useLatestVersion: {
                serializedName: "useLatestVersion",
                type: {
                    name: "Boolean"
                }
            }, subjectAlternativeNames: {
                serializedName: "subjectAlternativeNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, thumbprint: {
                serializedName: "thumbprint",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const AzureFirstPartyManagedCertificate = {
    type: {
        name: "Composite",
        className: "AzureFirstPartyManagedCertificate",
        modelProperties: Object.assign({}, Certificate.type.modelProperties)
    }
};
export const AFDDomain = {
    type: {
        name: "Composite",
        className: "AFDDomain",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { profileName: {
                serializedName: "properties.profileName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, tlsSettings: {
                serializedName: "properties.tlsSettings",
                type: {
                    name: "Composite",
                    className: "AFDDomainHttpsParameters"
                }
            }, azureDnsZone: {
                serializedName: "properties.azureDnsZone",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            }, preValidatedCustomDomainResourceId: {
                serializedName: "properties.preValidatedCustomDomainResourceId",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, deploymentStatus: {
                serializedName: "properties.deploymentStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, domainValidationState: {
                serializedName: "properties.domainValidationState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, hostName: {
                serializedName: "properties.hostName",
                type: {
                    name: "String"
                }
            }, validationProperties: {
                serializedName: "properties.validationProperties",
                type: {
                    name: "Composite",
                    className: "DomainValidationProperties"
                }
            } })
    }
};
export const AFDOriginGroup = {
    type: {
        name: "Composite",
        className: "AFDOriginGroup",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { profileName: {
                serializedName: "properties.profileName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, loadBalancingSettings: {
                serializedName: "properties.loadBalancingSettings",
                type: {
                    name: "Composite",
                    className: "LoadBalancingSettingsParameters"
                }
            }, healthProbeSettings: {
                serializedName: "properties.healthProbeSettings",
                type: {
                    name: "Composite",
                    className: "HealthProbeParameters"
                }
            }, trafficRestorationTimeToHealedOrNewEndpointsInMinutes: {
                constraints: {
                    InclusiveMaximum: 50,
                    InclusiveMinimum: 0
                },
                serializedName: "properties.trafficRestorationTimeToHealedOrNewEndpointsInMinutes",
                type: {
                    name: "Number"
                }
            }, sessionAffinityState: {
                serializedName: "properties.sessionAffinityState",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, deploymentStatus: {
                serializedName: "properties.deploymentStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const AFDOrigin = {
    type: {
        name: "Composite",
        className: "AFDOrigin",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { originGroupName: {
                serializedName: "properties.originGroupName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, azureOrigin: {
                serializedName: "properties.azureOrigin",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            }, hostName: {
                serializedName: "properties.hostName",
                type: {
                    name: "String"
                }
            }, httpPort: {
                constraints: {
                    InclusiveMaximum: 65535,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.httpPort",
                type: {
                    name: "Number"
                }
            }, httpsPort: {
                constraints: {
                    InclusiveMaximum: 65535,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.httpsPort",
                type: {
                    name: "Number"
                }
            }, originHostHeader: {
                serializedName: "properties.originHostHeader",
                type: {
                    name: "String"
                }
            }, priority: {
                constraints: {
                    InclusiveMaximum: 5,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.priority",
                type: {
                    name: "Number"
                }
            }, weight: {
                constraints: {
                    InclusiveMaximum: 1000,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.weight",
                type: {
                    name: "Number"
                }
            }, sharedPrivateLinkResource: {
                serializedName: "properties.sharedPrivateLinkResource",
                type: {
                    name: "Composite",
                    className: "SharedPrivateLinkResourceProperties"
                }
            }, enabledState: {
                serializedName: "properties.enabledState",
                type: {
                    name: "String"
                }
            }, enforceCertificateNameCheck: {
                defaultValue: true,
                serializedName: "properties.enforceCertificateNameCheck",
                type: {
                    name: "Boolean"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, deploymentStatus: {
                serializedName: "properties.deploymentStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const Route = {
    type: {
        name: "Composite",
        className: "Route",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { endpointName: {
                serializedName: "properties.endpointName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, customDomains: {
                serializedName: "properties.customDomains",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ActivatedResourceReference"
                        }
                    }
                }
            }, originGroup: {
                serializedName: "properties.originGroup",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            }, originPath: {
                serializedName: "properties.originPath",
                type: {
                    name: "String"
                }
            }, ruleSets: {
                serializedName: "properties.ruleSets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceReference"
                        }
                    }
                }
            }, supportedProtocols: {
                serializedName: "properties.supportedProtocols",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, patternsToMatch: {
                serializedName: "properties.patternsToMatch",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, cacheConfiguration: {
                serializedName: "properties.cacheConfiguration",
                type: {
                    name: "Composite",
                    className: "AfdRouteCacheConfiguration"
                }
            }, forwardingProtocol: {
                serializedName: "properties.forwardingProtocol",
                type: {
                    name: "String"
                }
            }, linkToDefaultDomain: {
                serializedName: "properties.linkToDefaultDomain",
                type: {
                    name: "String"
                }
            }, httpsRedirect: {
                serializedName: "properties.httpsRedirect",
                type: {
                    name: "String"
                }
            }, enabledState: {
                serializedName: "properties.enabledState",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, deploymentStatus: {
                serializedName: "properties.deploymentStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const RuleSet = {
    type: {
        name: "Composite",
        className: "RuleSet",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, deploymentStatus: {
                serializedName: "properties.deploymentStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, profileName: {
                serializedName: "properties.profileName",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const Rule = {
    type: {
        name: "Composite",
        className: "Rule",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { ruleSetName: {
                serializedName: "properties.ruleSetName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, order: {
                serializedName: "properties.order",
                type: {
                    name: "Number"
                }
            }, conditions: {
                serializedName: "properties.conditions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DeliveryRuleCondition"
                        }
                    }
                }
            }, actions: {
                serializedName: "properties.actions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DeliveryRuleActionAutoGenerated"
                        }
                    }
                }
            }, matchProcessingBehavior: {
                serializedName: "properties.matchProcessingBehavior",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, deploymentStatus: {
                serializedName: "properties.deploymentStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const SecurityPolicy = {
    type: {
        name: "Composite",
        className: "SecurityPolicy",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, deploymentStatus: {
                serializedName: "properties.deploymentStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, profileName: {
                serializedName: "properties.profileName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, parameters: {
                serializedName: "properties.parameters",
                type: {
                    name: "Composite",
                    className: "SecurityPolicyPropertiesParameters"
                }
            } })
    }
};
export const Secret = {
    type: {
        name: "Composite",
        className: "Secret",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, deploymentStatus: {
                serializedName: "properties.deploymentStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, profileName: {
                serializedName: "properties.profileName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, parameters: {
                serializedName: "properties.parameters",
                type: {
                    name: "Composite",
                    className: "SecretParameters"
                }
            } })
    }
};
export const Origin = {
    type: {
        name: "Composite",
        className: "Origin",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { hostName: {
                serializedName: "properties.hostName",
                type: {
                    name: "String"
                }
            }, httpPort: {
                constraints: {
                    InclusiveMaximum: 65535,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.httpPort",
                type: {
                    name: "Number"
                }
            }, httpsPort: {
                constraints: {
                    InclusiveMaximum: 65535,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.httpsPort",
                type: {
                    name: "Number"
                }
            }, originHostHeader: {
                serializedName: "properties.originHostHeader",
                type: {
                    name: "String"
                }
            }, priority: {
                constraints: {
                    InclusiveMaximum: 5,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.priority",
                type: {
                    name: "Number"
                }
            }, weight: {
                constraints: {
                    InclusiveMaximum: 1000,
                    InclusiveMinimum: 1
                },
                serializedName: "properties.weight",
                type: {
                    name: "Number"
                }
            }, enabled: {
                serializedName: "properties.enabled",
                type: {
                    name: "Boolean"
                }
            }, privateLinkAlias: {
                serializedName: "properties.privateLinkAlias",
                type: {
                    name: "String"
                }
            }, privateLinkResourceId: {
                serializedName: "properties.privateLinkResourceId",
                type: {
                    name: "String"
                }
            }, privateLinkLocation: {
                serializedName: "properties.privateLinkLocation",
                type: {
                    name: "String"
                }
            }, privateLinkApprovalMessage: {
                serializedName: "properties.privateLinkApprovalMessage",
                type: {
                    name: "String"
                }
            }, resourceState: {
                serializedName: "properties.resourceState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, privateEndpointStatus: {
                serializedName: "properties.privateEndpointStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const OriginGroup = {
    type: {
        name: "Composite",
        className: "OriginGroup",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { healthProbeSettings: {
                serializedName: "properties.healthProbeSettings",
                type: {
                    name: "Composite",
                    className: "HealthProbeParameters"
                }
            }, origins: {
                serializedName: "properties.origins",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ResourceReference"
                        }
                    }
                }
            }, trafficRestorationTimeToHealedOrNewEndpointsInMinutes: {
                constraints: {
                    InclusiveMaximum: 50,
                    InclusiveMinimum: 0
                },
                serializedName: "properties.trafficRestorationTimeToHealedOrNewEndpointsInMinutes",
                type: {
                    name: "Number"
                }
            }, responseBasedOriginErrorDetectionSettings: {
                serializedName: "properties.responseBasedOriginErrorDetectionSettings",
                type: {
                    name: "Composite",
                    className: "ResponseBasedOriginErrorDetectionParameters"
                }
            }, resourceState: {
                serializedName: "properties.resourceState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const CustomDomain = {
    type: {
        name: "Composite",
        className: "CustomDomain",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { hostName: {
                serializedName: "properties.hostName",
                type: {
                    name: "String"
                }
            }, resourceState: {
                serializedName: "properties.resourceState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, customHttpsProvisioningState: {
                serializedName: "properties.customHttpsProvisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, customHttpsProvisioningSubstate: {
                serializedName: "properties.customHttpsProvisioningSubstate",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, customHttpsParameters: {
                serializedName: "properties.customHttpsParameters",
                type: {
                    name: "Composite",
                    className: "CustomDomainHttpsParameters"
                }
            }, validationData: {
                serializedName: "properties.validationData",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const EdgeNode = {
    type: {
        name: "Composite",
        className: "EdgeNode",
        modelProperties: Object.assign(Object.assign({}, ProxyResource.type.modelProperties), { ipAddressGroups: {
                serializedName: "properties.ipAddressGroups",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IpAddressGroup"
                        }
                    }
                }
            } })
    }
};
export const AFDEndpoint = {
    type: {
        name: "Composite",
        className: "AFDEndpoint",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { profileName: {
                serializedName: "properties.profileName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, enabledState: {
                serializedName: "properties.enabledState",
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, deploymentStatus: {
                serializedName: "properties.deploymentStatus",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, hostName: {
                serializedName: "properties.hostName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, autoGeneratedDomainNameLabelScope: {
                serializedName: "properties.autoGeneratedDomainNameLabelScope",
                type: {
                    name: "String"
                }
            } })
    }
};
export const Profile = {
    type: {
        name: "Composite",
        className: "Profile",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }, kind: {
                serializedName: "kind",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceState: {
                serializedName: "properties.resourceState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, frontDoorId: {
                serializedName: "properties.frontDoorId",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, originResponseTimeoutSeconds: {
                constraints: {
                    InclusiveMinimum: 16
                },
                serializedName: "properties.originResponseTimeoutSeconds",
                type: {
                    name: "Number"
                }
            } })
    }
};
export const Endpoint = {
    type: {
        name: "Composite",
        className: "Endpoint",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { originPath: {
                serializedName: "properties.originPath",
                type: {
                    name: "String"
                }
            }, contentTypesToCompress: {
                serializedName: "properties.contentTypesToCompress",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String"
                        }
                    }
                }
            }, originHostHeader: {
                serializedName: "properties.originHostHeader",
                type: {
                    name: "String"
                }
            }, isCompressionEnabled: {
                serializedName: "properties.isCompressionEnabled",
                type: {
                    name: "Boolean"
                }
            }, isHttpAllowed: {
                serializedName: "properties.isHttpAllowed",
                type: {
                    name: "Boolean"
                }
            }, isHttpsAllowed: {
                serializedName: "properties.isHttpsAllowed",
                type: {
                    name: "Boolean"
                }
            }, queryStringCachingBehavior: {
                serializedName: "properties.queryStringCachingBehavior",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "IgnoreQueryString",
                        "BypassCaching",
                        "UseQueryString",
                        "NotSet"
                    ]
                }
            }, optimizationType: {
                serializedName: "properties.optimizationType",
                type: {
                    name: "String"
                }
            }, probePath: {
                serializedName: "properties.probePath",
                type: {
                    name: "String"
                }
            }, geoFilters: {
                serializedName: "properties.geoFilters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "GeoFilter"
                        }
                    }
                }
            }, defaultOriginGroup: {
                serializedName: "properties.defaultOriginGroup",
                type: {
                    name: "Composite",
                    className: "ResourceReference"
                }
            }, urlSigningKeys: {
                serializedName: "properties.urlSigningKeys",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UrlSigningKey"
                        }
                    }
                }
            }, deliveryPolicy: {
                serializedName: "properties.deliveryPolicy",
                type: {
                    name: "Composite",
                    className: "EndpointPropertiesUpdateParametersDeliveryPolicy"
                }
            }, webApplicationFirewallPolicyLink: {
                serializedName: "properties.webApplicationFirewallPolicyLink",
                type: {
                    name: "Composite",
                    className: "EndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink"
                }
            }, hostName: {
                serializedName: "properties.hostName",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, origins: {
                serializedName: "properties.origins",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DeepCreatedOrigin"
                        }
                    }
                }
            }, originGroups: {
                serializedName: "properties.originGroups",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DeepCreatedOriginGroup"
                        }
                    }
                }
            }, customDomains: {
                serializedName: "properties.customDomains",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DeepCreatedCustomDomain"
                        }
                    }
                }
            }, resourceState: {
                serializedName: "properties.resourceState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export const CdnWebApplicationFirewallPolicy = {
    type: {
        name: "Composite",
        className: "CdnWebApplicationFirewallPolicy",
        modelProperties: Object.assign(Object.assign({}, TrackedResource.type.modelProperties), { etag: {
                serializedName: "etag",
                type: {
                    name: "String"
                }
            }, sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku"
                }
            }, policySettings: {
                serializedName: "properties.policySettings",
                type: {
                    name: "Composite",
                    className: "PolicySettings"
                }
            }, rateLimitRules: {
                serializedName: "properties.rateLimitRules",
                type: {
                    name: "Composite",
                    className: "RateLimitRuleList"
                }
            }, customRules: {
                serializedName: "properties.customRules",
                type: {
                    name: "Composite",
                    className: "CustomRuleList"
                }
            }, managedRules: {
                serializedName: "properties.managedRules",
                type: {
                    name: "Composite",
                    className: "ManagedRuleSetList"
                }
            }, endpointLinks: {
                serializedName: "properties.endpointLinks",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CdnEndpoint"
                        }
                    }
                }
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String"
                }
            }, resourceState: {
                serializedName: "properties.resourceState",
                readOnly: true,
                type: {
                    name: "String"
                }
            } })
    }
};
export let discriminators = {
    DeliveryRuleCondition: DeliveryRuleCondition,
    DeliveryRuleActionAutoGenerated: DeliveryRuleActionAutoGenerated,
    SecurityPolicyPropertiesParameters: SecurityPolicyPropertiesParameters,
    SecretParameters: SecretParameters,
    CustomDomainHttpsParameters: CustomDomainHttpsParameters,
    "DeliveryRuleCondition.RemoteAddress": DeliveryRuleRemoteAddressCondition,
    "DeliveryRuleCondition.RequestMethod": DeliveryRuleRequestMethodCondition,
    "DeliveryRuleCondition.QueryString": DeliveryRuleQueryStringCondition,
    "DeliveryRuleCondition.PostArgs": DeliveryRulePostArgsCondition,
    "DeliveryRuleCondition.RequestUri": DeliveryRuleRequestUriCondition,
    "DeliveryRuleCondition.RequestHeader": DeliveryRuleRequestHeaderCondition,
    "DeliveryRuleCondition.RequestBody": DeliveryRuleRequestBodyCondition,
    "DeliveryRuleCondition.RequestScheme": DeliveryRuleRequestSchemeCondition,
    "DeliveryRuleCondition.UrlPath": DeliveryRuleUrlPathCondition,
    "DeliveryRuleCondition.UrlFileExtension": DeliveryRuleUrlFileExtensionCondition,
    "DeliveryRuleCondition.UrlFileName": DeliveryRuleUrlFileNameCondition,
    "DeliveryRuleCondition.HttpVersion": DeliveryRuleHttpVersionCondition,
    "DeliveryRuleCondition.Cookies": DeliveryRuleCookiesCondition,
    "DeliveryRuleCondition.IsDevice": DeliveryRuleIsDeviceCondition,
    "DeliveryRuleCondition.SocketAddr": DeliveryRuleSocketAddrCondition,
    "DeliveryRuleCondition.ClientPort": DeliveryRuleClientPortCondition,
    "DeliveryRuleCondition.ServerPort": DeliveryRuleServerPortCondition,
    "DeliveryRuleCondition.HostName": DeliveryRuleHostNameCondition,
    "DeliveryRuleCondition.SslProtocol": DeliveryRuleSslProtocolCondition,
    "DeliveryRuleActionAutoGenerated.UrlRedirect": UrlRedirectAction,
    "DeliveryRuleActionAutoGenerated.UrlSigning": UrlSigningAction,
    "DeliveryRuleActionAutoGenerated.OriginGroupOverride": OriginGroupOverrideAction,
    "DeliveryRuleActionAutoGenerated.UrlRewrite": UrlRewriteAction,
    "DeliveryRuleActionAutoGenerated.ModifyRequestHeader": DeliveryRuleRequestHeaderAction,
    "DeliveryRuleActionAutoGenerated.ModifyResponseHeader": DeliveryRuleResponseHeaderAction,
    "DeliveryRuleActionAutoGenerated.CacheExpiration": DeliveryRuleCacheExpirationAction,
    "DeliveryRuleActionAutoGenerated.CacheKeyQueryString": DeliveryRuleCacheKeyQueryStringAction,
    "DeliveryRuleActionAutoGenerated.RouteConfigurationOverride": DeliveryRuleRouteConfigurationOverrideAction,
    "SecurityPolicyPropertiesParameters.WebApplicationFirewall": SecurityPolicyWebApplicationFirewallParameters,
    "SecretParameters.UrlSigningKey": UrlSigningKeyParameters,
    "SecretParameters.ManagedCertificate": ManagedCertificateParameters,
    "SecretParameters.CustomerCertificate": CustomerCertificateParameters,
    "SecretParameters.AzureFirstPartyManagedCertificate": AzureFirstPartyManagedCertificateParameters,
    "CustomDomainHttpsParameters.Cdn": CdnManagedHttpsParameters,
    "CustomDomainHttpsParameters.AzureKeyVault": UserManagedHttpsParameters
};
//# sourceMappingURL=mappers.js.map