import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Secrets } from "../operationsInterfaces";
import { CdnManagementClient } from "../cdnManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { Secret, SecretsListByProfileOptionalParams, SecretsGetOptionalParams, SecretsGetResponse, SecretsCreateOptionalParams, SecretsCreateResponse, SecretsDeleteOptionalParams } from "../models";
/** Class containing Secrets operations. */
export declare class SecretsImpl implements Secrets {
    private readonly client;
    /**
     * Initialize a new instance of the class Secrets class.
     * @param client Reference to the service client
     */
    constructor(client: CdnManagementClient);
    /**
     * Lists existing AzureFrontDoor secrets.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param options The options parameters.
     */
    listByProfile(resourceGroupName: string, profileName: string, options?: SecretsListByProfileOptionalParams): PagedAsyncIterableIterator<Secret>;
    private listByProfilePagingPage;
    private listByProfilePagingAll;
    /**
     * Lists existing AzureFrontDoor secrets.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param options The options parameters.
     */
    private _listByProfile;
    /**
     * Gets an existing Secret within a profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param secretName Name of the Secret under the profile.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, profileName: string, secretName: string, options?: SecretsGetOptionalParams): Promise<SecretsGetResponse>;
    /**
     * Creates a new Secret within the specified profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param secretName Name of the Secret under the profile.
     * @param secret The Secret properties.
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, profileName: string, secretName: string, secret: Secret, options?: SecretsCreateOptionalParams): Promise<PollerLike<PollOperationState<SecretsCreateResponse>, SecretsCreateResponse>>;
    /**
     * Creates a new Secret within the specified profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param secretName Name of the Secret under the profile.
     * @param secret The Secret properties.
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, profileName: string, secretName: string, secret: Secret, options?: SecretsCreateOptionalParams): Promise<SecretsCreateResponse>;
    /**
     * Deletes an existing Secret within profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param secretName Name of the Secret under the profile.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, profileName: string, secretName: string, options?: SecretsDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes an existing Secret within profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param secretName Name of the Secret under the profile.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, profileName: string, secretName: string, options?: SecretsDeleteOptionalParams): Promise<void>;
    /**
     * ListByProfileNext
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param nextLink The nextLink from the previous successful call to the ListByProfile method.
     * @param options The options parameters.
     */
    private _listByProfileNext;
}
//# sourceMappingURL=secrets.d.ts.map