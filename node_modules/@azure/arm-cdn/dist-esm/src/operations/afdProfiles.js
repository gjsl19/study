/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { setContinuationToken } from "../pagingHelper";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
/// <reference lib="esnext.asynciterable" />
/** Class containing AfdProfiles operations. */
export class AfdProfilesImpl {
    /**
     * Initialize a new instance of the class AfdProfiles class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Checks the quota and actual usage of AzureFrontDoor endpoints under the given CDN profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium or CDN profile
     *                    which is unique within the resource group.
     * @param options The options parameters.
     */
    listResourceUsage(resourceGroupName, profileName, options) {
        const iter = this.listResourceUsagePagingAll(resourceGroupName, profileName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listResourceUsagePagingPage(resourceGroupName, profileName, options, settings);
            }
        };
    }
    listResourceUsagePagingPage(resourceGroupName, profileName, options, settings) {
        return __asyncGenerator(this, arguments, function* listResourceUsagePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._listResourceUsage(resourceGroupName, profileName, options));
                let page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._listResourceUsageNext(resourceGroupName, profileName, continuationToken, options));
                continuationToken = result.nextLink;
                let page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    listResourceUsagePagingAll(resourceGroupName, profileName, options) {
        return __asyncGenerator(this, arguments, function* listResourceUsagePagingAll_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.listResourceUsagePagingPage(resourceGroupName, profileName, options)), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const page = _c.value;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Checks the quota and actual usage of AzureFrontDoor endpoints under the given CDN profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium or CDN profile
     *                    which is unique within the resource group.
     * @param options The options parameters.
     */
    _listResourceUsage(resourceGroupName, profileName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, profileName, options }, listResourceUsageOperationSpec);
    }
    /**
     * Check the name availability of a host name.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium or CDN profile
     *                    which is unique within the resource group.
     * @param checkHostNameAvailabilityInput Custom domain to be validated.
     * @param options The options parameters.
     */
    checkHostNameAvailability(resourceGroupName, profileName, checkHostNameAvailabilityInput, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            profileName,
            checkHostNameAvailabilityInput,
            options
        }, checkHostNameAvailabilityOperationSpec);
    }
    /**
     * ListResourceUsageNext
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium or CDN profile
     *                    which is unique within the resource group.
     * @param nextLink The nextLink from the previous successful call to the ListResourceUsage method.
     * @param options The options parameters.
     */
    _listResourceUsageNext(resourceGroupName, profileName, nextLink, options) {
        return this.client.sendOperationRequest({ resourceGroupName, profileName, nextLink, options }, listResourceUsageNextOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listResourceUsageOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/usages",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.UsagesListResult
        },
        default: {
            bodyMapper: Mappers.AfdErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.profileName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const checkHostNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Cdn/profiles/{profileName}/checkHostNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CheckNameAvailabilityOutput
        },
        default: {
            bodyMapper: Mappers.AfdErrorResponse
        }
    },
    requestBody: Parameters.checkHostNameAvailabilityInput,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.profileName
    ],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer
};
const listResourceUsageNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.UsagesListResult
        },
        default: {
            bodyMapper: Mappers.AfdErrorResponse
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.profileName,
        Parameters.nextLink
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=afdProfiles.js.map