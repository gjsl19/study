import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import { AfdProfiles, AfdCustomDomains, AfdEndpoints, AfdOriginGroups, AfdOrigins, Routes, RuleSets, Rules, SecurityPolicies, Secrets, Validate, LogAnalytics, Profiles, Endpoints, Origins, OriginGroups, CustomDomains, ResourceUsageOperations, Operations, EdgeNodes, Policies, ManagedRuleSets } from "./operationsInterfaces";
import { CdnManagementClientOptionalParams, CheckEndpointNameAvailabilityInput, CheckEndpointNameAvailabilityOptionalParams, CheckEndpointNameAvailabilityResponse, CheckNameAvailabilityInput, CheckNameAvailabilityOptionalParams, CheckNameAvailabilityResponse, CheckNameAvailabilityWithSubscriptionOptionalParams, CheckNameAvailabilityWithSubscriptionResponse, ValidateProbeInput, ValidateProbeOptionalParams, ValidateProbeResponse } from "./models";
export declare class CdnManagementClient extends coreClient.ServiceClient {
    $host: string;
    subscriptionId: string;
    apiVersion: string;
    /**
     * Initializes a new instance of the CdnManagementClient class.
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param subscriptionId Azure Subscription ID.
     * @param options The parameter options
     */
    constructor(credentials: coreAuth.TokenCredential, subscriptionId: string, options?: CdnManagementClientOptionalParams);
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    private addCustomApiVersionPolicy;
    /**
     * Check the availability of a resource name. This is needed for resources where name is globally
     * unique, such as a afdx endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param checkEndpointNameAvailabilityInput Input to check.
     * @param options The options parameters.
     */
    checkEndpointNameAvailability(resourceGroupName: string, checkEndpointNameAvailabilityInput: CheckEndpointNameAvailabilityInput, options?: CheckEndpointNameAvailabilityOptionalParams): Promise<CheckEndpointNameAvailabilityResponse>;
    /**
     * Check the availability of a resource name. This is needed for resources where name is globally
     * unique, such as a CDN endpoint.
     * @param checkNameAvailabilityInput Input to check.
     * @param options The options parameters.
     */
    checkNameAvailability(checkNameAvailabilityInput: CheckNameAvailabilityInput, options?: CheckNameAvailabilityOptionalParams): Promise<CheckNameAvailabilityResponse>;
    /**
     * Check the availability of a resource name. This is needed for resources where name is globally
     * unique, such as a CDN endpoint.
     * @param checkNameAvailabilityInput Input to check.
     * @param options The options parameters.
     */
    checkNameAvailabilityWithSubscription(checkNameAvailabilityInput: CheckNameAvailabilityInput, options?: CheckNameAvailabilityWithSubscriptionOptionalParams): Promise<CheckNameAvailabilityWithSubscriptionResponse>;
    /**
     * Check if the probe path is a valid path and the file can be accessed. Probe path is the path to a
     * file hosted on the origin server to help accelerate the delivery of dynamic content via the CDN
     * endpoint. This path is relative to the origin path specified in the endpoint configuration.
     * @param validateProbeInput Input to check.
     * @param options The options parameters.
     */
    validateProbe(validateProbeInput: ValidateProbeInput, options?: ValidateProbeOptionalParams): Promise<ValidateProbeResponse>;
    afdProfiles: AfdProfiles;
    afdCustomDomains: AfdCustomDomains;
    afdEndpoints: AfdEndpoints;
    afdOriginGroups: AfdOriginGroups;
    afdOrigins: AfdOrigins;
    routes: Routes;
    ruleSets: RuleSets;
    rules: Rules;
    securityPolicies: SecurityPolicies;
    secrets: Secrets;
    validate: Validate;
    logAnalytics: LogAnalytics;
    profiles: Profiles;
    endpoints: Endpoints;
    origins: Origins;
    originGroups: OriginGroups;
    customDomains: CustomDomains;
    resourceUsageOperations: ResourceUsageOperations;
    operations: Operations;
    edgeNodes: EdgeNodes;
    policies: Policies;
    managedRuleSets: ManagedRuleSets;
}
//# sourceMappingURL=cdnManagementClient.d.ts.map