import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Routes } from "../operationsInterfaces";
import { CdnManagementClient } from "../cdnManagementClient";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import { Route, RoutesListByEndpointOptionalParams, RoutesGetOptionalParams, RoutesGetResponse, RoutesCreateOptionalParams, RoutesCreateResponse, RouteUpdateParameters, RoutesUpdateOptionalParams, RoutesUpdateResponse, RoutesDeleteOptionalParams } from "../models";
/** Class containing Routes operations. */
export declare class RoutesImpl implements Routes {
    private readonly client;
    /**
     * Initialize a new instance of the class Routes class.
     * @param client Reference to the service client
     */
    constructor(client: CdnManagementClient);
    /**
     * Lists all of the existing origins within a profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param endpointName Name of the endpoint under the profile which is unique globally.
     * @param options The options parameters.
     */
    listByEndpoint(resourceGroupName: string, profileName: string, endpointName: string, options?: RoutesListByEndpointOptionalParams): PagedAsyncIterableIterator<Route>;
    private listByEndpointPagingPage;
    private listByEndpointPagingAll;
    /**
     * Lists all of the existing origins within a profile.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param endpointName Name of the endpoint under the profile which is unique globally.
     * @param options The options parameters.
     */
    private _listByEndpoint;
    /**
     * Gets an existing route with the specified route name under the specified subscription, resource
     * group, profile, and AzureFrontDoor endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param endpointName Name of the endpoint under the profile which is unique globally.
     * @param routeName Name of the routing rule.
     * @param options The options parameters.
     */
    get(resourceGroupName: string, profileName: string, endpointName: string, routeName: string, options?: RoutesGetOptionalParams): Promise<RoutesGetResponse>;
    /**
     * Creates a new route with the specified route name under the specified subscription, resource group,
     * profile, and AzureFrontDoor endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param endpointName Name of the endpoint under the profile which is unique globally.
     * @param routeName Name of the routing rule.
     * @param route Route properties
     * @param options The options parameters.
     */
    beginCreate(resourceGroupName: string, profileName: string, endpointName: string, routeName: string, route: Route, options?: RoutesCreateOptionalParams): Promise<PollerLike<PollOperationState<RoutesCreateResponse>, RoutesCreateResponse>>;
    /**
     * Creates a new route with the specified route name under the specified subscription, resource group,
     * profile, and AzureFrontDoor endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param endpointName Name of the endpoint under the profile which is unique globally.
     * @param routeName Name of the routing rule.
     * @param route Route properties
     * @param options The options parameters.
     */
    beginCreateAndWait(resourceGroupName: string, profileName: string, endpointName: string, routeName: string, route: Route, options?: RoutesCreateOptionalParams): Promise<RoutesCreateResponse>;
    /**
     * Updates an existing route with the specified route name under the specified subscription, resource
     * group, profile, and AzureFrontDoor endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param endpointName Name of the endpoint under the profile which is unique globally.
     * @param routeName Name of the routing rule.
     * @param routeUpdateProperties Route update properties
     * @param options The options parameters.
     */
    beginUpdate(resourceGroupName: string, profileName: string, endpointName: string, routeName: string, routeUpdateProperties: RouteUpdateParameters, options?: RoutesUpdateOptionalParams): Promise<PollerLike<PollOperationState<RoutesUpdateResponse>, RoutesUpdateResponse>>;
    /**
     * Updates an existing route with the specified route name under the specified subscription, resource
     * group, profile, and AzureFrontDoor endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param endpointName Name of the endpoint under the profile which is unique globally.
     * @param routeName Name of the routing rule.
     * @param routeUpdateProperties Route update properties
     * @param options The options parameters.
     */
    beginUpdateAndWait(resourceGroupName: string, profileName: string, endpointName: string, routeName: string, routeUpdateProperties: RouteUpdateParameters, options?: RoutesUpdateOptionalParams): Promise<RoutesUpdateResponse>;
    /**
     * Deletes an existing route with the specified route name under the specified subscription, resource
     * group, profile, and AzureFrontDoor endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param endpointName Name of the endpoint under the profile which is unique globally.
     * @param routeName Name of the routing rule.
     * @param options The options parameters.
     */
    beginDelete(resourceGroupName: string, profileName: string, endpointName: string, routeName: string, options?: RoutesDeleteOptionalParams): Promise<PollerLike<PollOperationState<void>, void>>;
    /**
     * Deletes an existing route with the specified route name under the specified subscription, resource
     * group, profile, and AzureFrontDoor endpoint.
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param endpointName Name of the endpoint under the profile which is unique globally.
     * @param routeName Name of the routing rule.
     * @param options The options parameters.
     */
    beginDeleteAndWait(resourceGroupName: string, profileName: string, endpointName: string, routeName: string, options?: RoutesDeleteOptionalParams): Promise<void>;
    /**
     * ListByEndpointNext
     * @param resourceGroupName Name of the Resource group within the Azure subscription.
     * @param profileName Name of the Azure Front Door Standard or Azure Front Door Premium profile which
     *                    is unique within the resource group.
     * @param endpointName Name of the endpoint under the profile which is unique globally.
     * @param nextLink The nextLink from the previous successful call to the ListByEndpoint method.
     * @param options The options parameters.
     */
    private _listByEndpointNext;
}
//# sourceMappingURL=routes.d.ts.map